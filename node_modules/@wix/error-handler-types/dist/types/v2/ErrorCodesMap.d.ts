import { StatusCode } from '../types/StatusCode';
import { ShowErrorProps } from './ShowError';
import { ApplicationError, FieldViolationBase } from '../types';
export interface ErrorMetaResponse {
    __applicationErrorsType?: ApplicationError;
    __validationErrorsType?: FieldViolationBase;
}
export type ShowErrorMapFunction = (error: Error | null) => ShowErrorProps;
export type StatusCodeMap = Partial<Record<StatusCode, ShowErrorMapFunction>>;
export type ErrorCodesMapUntyped = Partial<Record<string, ShowErrorMapFunction | false>>;
export type ApplicationErrorsMap<TApplicationError extends ApplicationError = ApplicationError> = {
    [K in NonNullable<TApplicationError['code']>]?: ShowErrorMapFunction | false;
} & {
    [key: string]: ShowErrorMapFunction | false;
};
export type ValidationErrorsMap<TFieldViolation extends FieldViolationBase = FieldViolationBase> = {
    [K in NonNullable<TFieldViolation['ruleName']>]?: ShowErrorMapFunction | false;
} & {
    [key: string]: ShowErrorMapFunction | false;
};
export type ErrorCodesMapConditionalApplicationError<T extends ErrorMetaResponse> = NonNullable<NonNullable<T['__applicationErrorsType']>['code']> extends string ? ApplicationErrorsMap<NonNullable<T['__applicationErrorsType']>> : ErrorCodesMapUntyped;
export type ErrorCodesMapConditionalValidationError<T extends ErrorMetaResponse> = NonNullable<NonNullable<T['__validationErrorsType']>['ruleName']> extends string ? ValidationErrorsMap<NonNullable<T['__validationErrorsType']>> : ErrorCodesMapUntyped;
type UnpackPromise<T> = T extends Promise<infer U> ? U : T;
export type ErrorCodesMap<T = {}> = T extends ErrorMetaResponse ? ErrorCodesMapConditionalApplicationError<T> & ErrorCodesMapConditionalValidationError<T> : T extends {
    data?: ErrorMetaResponse;
} ? ErrorCodesMapConditionalApplicationError<NonNullable<T['data']>> & ErrorCodesMapConditionalValidationError<NonNullable<T['data']>> : T extends (...args: any[]) => (...args: any[]) => Promise<ErrorMetaResponse> ? ErrorCodesMapConditionalApplicationError<UnpackPromise<ReturnType<ReturnType<T>>>> & ErrorCodesMapConditionalValidationError<UnpackPromise<ReturnType<ReturnType<T>>>> : T extends (...args: any[]) => (...args: any[]) => {
    _?: ErrorMetaResponse;
} ? ErrorCodesMapConditionalApplicationError<UnpackPromise<NonNullable<ReturnType<ReturnType<T>>['_']>>> & ErrorCodesMapConditionalValidationError<UnpackPromise<NonNullable<ReturnType<ReturnType<T>>['_']>>> : ErrorCodesMapUntyped;
export {};
//# sourceMappingURL=ErrorCodesMap.d.ts.map