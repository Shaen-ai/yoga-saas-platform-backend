{"version":3,"sources":["../../meta.ts","../../src/iam-verification-v1-start-response-verification.http.ts","../../src/iam-verification-v1-start-response-verification.types.ts","../../src/iam-verification-v1-start-response-verification.meta.ts"],"sourcesContent":["export * from './src/iam-verification-v1-start-response-verification.meta.js';\n","import { transformRESTFloatToSDKFloat } from '@wix/sdk-runtime/transformations/float';\nimport { transformRESTBytesToSDKBytes } from '@wix/sdk-runtime/transformations/bytes';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveWixIamVerificationV1VerificationServiceUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'www.wixapis.com': [\n      {\n        srcPath: '/_api/iam/verification',\n        destPath: '',\n      },\n    ],\n    _: [\n      {\n        srcPath: '/_api/iam/verification',\n        destPath: '',\n      },\n    ],\n    'www._base_domain_': [\n      {\n        srcPath: '/_api/iam/verification',\n        destPath: '',\n      },\n    ],\n    '*.dev.wix-code.com': [\n      {\n        srcPath: '/iam/verification/v1/auth/resend',\n        destPath: '/v1/auth/resend',\n      },\n      {\n        srcPath: '/iam/verification/v1/Start',\n        destPath: '/v1/Start',\n      },\n      {\n        srcPath: '/iam/verification/v1/auth/verify',\n        destPath: '/v1/auth/verify',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_identity_verification';\n\n/**\n * starts a verification process\n * example: sends a code to the identity's email\n */\nexport function start(payload: object): RequestOptionsFactory<any> {\n  function __start({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.iam.verification.v1.start_response',\n      method: 'POST' as any,\n      methodFqn: 'wix.iam.verification.v1.VerificationService.Start',\n      packageName: PACKAGE_NAME,\n      migrationOptions: {\n        optInTransformResponse: true,\n      },\n      url: resolveWixIamVerificationV1VerificationServiceUrl({\n        protoPath: '/v1/Start',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __start;\n}\n\n/**\n * Continues the registration process when a member is required to verify an email address\n * using a verification code received by email.\n *\n * Email verification is required when the registering member is already listed as a contact.\n *\n * Typically, after a successful verification, you generate and use member tokens for the\n * registered member so that subsequent API calls are called as part of a member session.\n */\nexport function verifyDuringAuthentication(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __verifyDuringAuthentication({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.iam.verification.v1.start_response',\n      method: 'POST' as any,\n      methodFqn:\n        'wix.iam.verification.v1.VerificationService.VerifyDuringAuthentication',\n      packageName: PACKAGE_NAME,\n      migrationOptions: {\n        optInTransformResponse: true,\n      },\n      url: resolveWixIamVerificationV1VerificationServiceUrl({\n        protoPath: '/v1/auth/verify',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTBytesToSDKBytes,\n            paths: [\n              {\n                path: 'mfaChallengeData.verificationChallengeData.webauthnData.challenge',\n              },\n              {\n                path: 'mfaChallengeData.verificationChallengeData.webauthnData.allowCredentials.id',\n              },\n              {\n                path: 'mfaChallengeData.verificationChallengeData.webauthnData.extensions.largeBlobWrite',\n              },\n            ],\n          },\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'identity.createdDate' },\n              { path: 'identity.updatedDate' },\n              { path: 'identity.identityProfile.customFields.value.dateValue' },\n              { path: 'additionalData.*.dateValue' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'identity.identityProfile.customFields.value.numValue' },\n              { path: 'additionalData.*.numValue' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __verifyDuringAuthentication;\n}\n","export interface StartResponse {\n  /** the identifier of the verification process */\n  verificationId?: string;\n}\n\nexport interface StartRequest {\n  /**\n   * an identity_Id.\n   * If not provided - currently, an exception is thrown. In the future the identity from identity response will be taken.\n   * @format GUID\n   */\n  identityId?: string | null;\n  /** the delivery target */\n  target?: TargetWithLiterals;\n}\n\nexport enum Target {\n  UNKNOWN_TARGET = 'UNKNOWN_TARGET',\n  EMAIL = 'EMAIL',\n}\n\n/** @enumType */\nexport type TargetWithLiterals = Target | 'UNKNOWN_TARGET' | 'EMAIL';\n\nexport interface VerifyRequest {\n  /**\n   * the code to verify\n   * @minLength 6\n   * @maxLength 6\n   */\n  code?: string;\n  /** the identifier of the verification process */\n  verificationId?: string;\n}\n\nexport interface VerifyResponse {}\n\nexport interface VerifyDuringAuthenticationRequest {\n  /** The code to verify. */\n  code: string;\n  /** A state token representing the `REQUIRE_EMAIL_VERIFICATION` state. */\n  stateToken: string;\n}\n\nexport interface StateMachineResponse\n  extends StateMachineResponseStateDataOneOf {\n  /** Current state of the login or registration process. */\n  state?: StateTypeWithLiterals;\n  /** Session token. If `state` is not `SUCCESS`, this field is undefined. */\n  sessionToken?: string | null;\n  /** Token that represents the current state of the login or registration process. */\n  stateToken?: string | null;\n  /** Identity of the current member. */\n  identity?: Identity;\n  /** Additional data relevant to the login or registration process. */\n  additionalData?: Record<string, CustomValue>;\n}\n\n/** @oneof */\nexport interface StateMachineResponseStateDataOneOf {}\n\nexport enum StateType {\n  /** Initial unknown state. */\n  UNKNOWN_STATE = 'UNKNOWN_STATE',\n  /** Login completed successfully. */\n  SUCCESS = 'SUCCESS',\n  /** Indicates that the member needs the owner to approve their registration. */\n  REQUIRE_OWNER_APPROVAL = 'REQUIRE_OWNER_APPROVAL',\n  /** Indicates that the member needs to verify their email. */\n  REQUIRE_EMAIL_VERIFICATION = 'REQUIRE_EMAIL_VERIFICATION',\n  /** Indicates that the `status` is not one that prevents the member logging in, meaning it's not `OFFLINE`, `BLOCKED`, or `DELETED`. */\n  STATUS_CHECK = 'STATUS_CHECK',\n}\n\n/** @enumType */\nexport type StateTypeWithLiterals =\n  | StateType\n  | 'UNKNOWN_STATE'\n  | 'SUCCESS'\n  | 'REQUIRE_OWNER_APPROVAL'\n  | 'REQUIRE_EMAIL_VERIFICATION'\n  | 'STATUS_CHECK';\n\nexport interface Identity {\n  /**\n   * Identity ID.\n   * @format GUID\n   */\n  id?: string | null;\n  /**\n   * Revision number, which increments by 1 each time the identity is updated.\n   * To prevent conflicting changes,\n   * the current revision must be passed when updating the identity.\n   *\n   * Ignored when creating an identity.\n   */\n  revision?: string | null;\n  /**\n   * Date and time the identity was created.\n   * @readonly\n   */\n  createdDate?: Date | null;\n  /**\n   * Date and time the identity was updated.\n   * @readonly\n   */\n  updatedDate?: Date | null;\n  /** The identity configured connections to authenticate with. */\n  connections?: Connection[];\n  /** Identity profile. */\n  identityProfile?: IdentityProfile;\n  /**\n   * Additional information about the identity that can impact user access.\n   * This data cannot be set.\n   */\n  metadata?: Metadata;\n  /** Identity email address. */\n  email?: Email;\n  /** Identity's current status. */\n  status?: StatusV2;\n  /**\n   * Identity verification factors.\n   * @maxSize 10\n   * @readonly\n   */\n  factors?: Factor[];\n}\n\nexport interface Connection extends ConnectionTypeOneOf {\n  /** IDP connection. */\n  idpConnection?: IdpConnection;\n  /** Authenticator connection. */\n  authenticatorConnection?: AuthenticatorConnection;\n}\n\n/** @oneof */\nexport interface ConnectionTypeOneOf {\n  /** IDP connection. */\n  idpConnection?: IdpConnection;\n  /** Authenticator connection. */\n  authenticatorConnection?: AuthenticatorConnection;\n}\n\nexport interface IdpConnection {\n  /**\n   * IDP connection ID.\n   * @format GUID\n   */\n  idpConnectionId?: string;\n  /** IDP user ID. */\n  idpUserId?: string;\n}\n\nexport interface AuthenticatorConnection {\n  /**\n   * Authenticator connection ID.\n   * @format GUID\n   */\n  authenticatorConnectionId?: string;\n  /** Whether re-enrollment is required. */\n  reEnrollmentRequired?: boolean;\n}\n\nexport interface IdentityProfile {\n  /** Profile first name. */\n  firstName?: string | null;\n  /** Profile last name. */\n  lastName?: string | null;\n  /** Profile nickname. */\n  nickname?: string | null;\n  /** Profile picture URL. */\n  picture?: string | null;\n  /**\n   * Deprecated. Use `secondaryEmails` instead.\n   * @deprecated Deprecated. Use `secondaryEmails` instead.\n   * @replacedBy secondary_emails\n   * @targetRemovalDate 2023-11-01\n   */\n  emails?: string[];\n  /**\n   * Deprecated. Use `phonesV2` instead.\n   * @deprecated Deprecated. Use `phonesV2` instead.\n   * @replacedBy phones_v2\n   * @targetRemovalDate 2023-11-01\n   */\n  phones?: string[];\n  /**\n   * List of profile labels.\n   * @maxSize 2000\n   */\n  labels?: string[];\n  /**\n   * Profile language.\n   * @format LANGUAGE\n   */\n  language?: string | null;\n  /** Profile privacy status. */\n  privacyStatus?: PrivacyStatusWithLiterals;\n  /**\n   * Any number of custom fields. [Custom fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)\n   * are used to store additional information about your site or app's contacts.\n   */\n  customFields?: CustomField[];\n  /** List of profile email addresses. */\n  secondaryEmails?: SecondaryEmail[];\n  /** List of profile phone numbers. */\n  phonesV2?: Phone[];\n  /** List of profile physical addresses. */\n  addresses?: AddressWrapper[];\n  /**\n   * Company name.\n   * @maxLength 1000\n   */\n  company?: string | null;\n  /**\n   * Position within company.\n   * @maxLength 1000\n   */\n  position?: string | null;\n  /**\n   * Profile birthdate in `YYYY-MM-DD` format.\n   * @format LOCAL_DATE\n   */\n  birthdate?: string | null;\n  /**\n   * Profile slug.\n   * @maxLength 255\n   */\n  slug?: string | null;\n  /** Consent to be added to mailing list */\n  subscription?: boolean | null;\n  /**\n   * Government id for personal/corporate (Vat ID).\n   * @maxLength 1000\n   */\n  vatId?: string | null;\n}\n\nexport enum PrivacyStatus {\n  /** No defined privacy status. */\n  UNDEFINED = 'UNDEFINED',\n  /** Profile details, such as profile name and profile picture, are visible to other members. */\n  PUBLIC = 'PUBLIC',\n  /** Profile details aren't visible to other members. */\n  PRIVATE = 'PRIVATE',\n}\n\n/** @enumType */\nexport type PrivacyStatusWithLiterals =\n  | PrivacyStatus\n  | 'UNDEFINED'\n  | 'PUBLIC'\n  | 'PRIVATE';\n\nexport interface CustomField {\n  /**\n   * Custom field name. The name must match one of the key properties of the objects returned by\n   * [`List Extended Fields`](https://dev.wix.com/docs/rest/api-reference/contacts/extended-fields/list-extended-fields)\n   * with the `custom.` prefix removed.\n   */\n  name?: string;\n  /** Custom field value. */\n  value?: V1CustomValue;\n}\n\nexport interface V1CustomValue extends V1CustomValueValueOneOf {\n  /** String value. */\n  strValue?: string;\n  /** Number value. */\n  numValue?: number;\n  /** Date value. */\n  dateValue?: Date | null;\n  /** Array of values. */\n  listValue?: V1ListValue;\n  /** Map of values. */\n  mapValue?: V1MapValue;\n}\n\n/** @oneof */\nexport interface V1CustomValueValueOneOf {\n  /** String value. */\n  strValue?: string;\n  /** Number value. */\n  numValue?: number;\n  /** Date value. */\n  dateValue?: Date | null;\n  /** Array of values. */\n  listValue?: V1ListValue;\n  /** Map of values. */\n  mapValue?: V1MapValue;\n}\n\nexport interface V1ListValue {\n  /** Custom value. */\n  value?: V1CustomValue[];\n}\n\nexport interface V1MapValue {\n  /** Mapped custom value. */\n  value?: Record<string, V1CustomValue>;\n}\n\nexport interface SecondaryEmail {\n  /**\n   * Email address.\n   * @format EMAIL\n   */\n  email?: string;\n  /** Email tag. */\n  tag?: EmailTagWithLiterals;\n}\n\nexport enum EmailTag {\n  UNTAGGED = 'UNTAGGED',\n  MAIN = 'MAIN',\n  HOME = 'HOME',\n  WORK = 'WORK',\n}\n\n/** @enumType */\nexport type EmailTagWithLiterals =\n  | EmailTag\n  | 'UNTAGGED'\n  | 'MAIN'\n  | 'HOME'\n  | 'WORK';\n\nexport interface Phone {\n  /**\n   * Phone country code.\n   * @format COUNTRY\n   */\n  countryCode?: string | null;\n  /**\n   * Phone number.\n   * @format PHONE\n   */\n  phone?: string;\n  /** Phone tag. */\n  tag?: PhoneTagWithLiterals;\n}\n\nexport enum PhoneTag {\n  UNTAGGED = 'UNTAGGED',\n  MAIN = 'MAIN',\n  HOME = 'HOME',\n  MOBILE = 'MOBILE',\n  WORK = 'WORK',\n  FAX = 'FAX',\n}\n\n/** @enumType */\nexport type PhoneTagWithLiterals =\n  | PhoneTag\n  | 'UNTAGGED'\n  | 'MAIN'\n  | 'HOME'\n  | 'MOBILE'\n  | 'WORK'\n  | 'FAX';\n\nexport interface AddressWrapper {\n  /** Address. */\n  address?: Address;\n  /** Address tag. */\n  tag?: AddressTagWithLiterals;\n}\n\n/** Physical address */\nexport interface Address {\n  /**\n   * Country code.\n   * @format COUNTRY\n   */\n  country?: string | null;\n  /** Subdivision. Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */\n  subdivision?: string | null;\n  /** City name. */\n  city?: string | null;\n  /** Zip/postal code. */\n  postalCode?: string | null;\n  /** Main address line, usually street and number as free text. */\n  addressLine?: string | null;\n  /** Free text providing more detailed address info. Usually contains apartment, suite, and floor. */\n  addressLine2?: string | null;\n  /**\n   * Street name.\n   * @maxLength 1000\n   */\n  streetName?: string | null;\n  /**\n   * Street number.\n   * @maxLength 1000\n   */\n  streetNumber?: string | null;\n}\n\nexport enum AddressTag {\n  UNTAGGED = 'UNTAGGED',\n  HOME = 'HOME',\n  WORK = 'WORK',\n  BILLING = 'BILLING',\n  SHIPPING = 'SHIPPING',\n}\n\n/** @enumType */\nexport type AddressTagWithLiterals =\n  | AddressTag\n  | 'UNTAGGED'\n  | 'HOME'\n  | 'WORK'\n  | 'BILLING'\n  | 'SHIPPING';\n\nexport interface Metadata {}\n\nexport interface Email {\n  /**\n   * Email address.\n   * @format EMAIL\n   */\n  address?: string;\n  /** Whether the email address is verified. */\n  isVerified?: boolean;\n}\n\nexport interface StatusV2 {\n  /** Descriptive name of the identity status. */\n  name?: StatusNameWithLiterals;\n  /** Reasons for the current identity status. */\n  reasons?: ReasonWithLiterals[];\n}\n\nexport enum StatusName {\n  /** Unknown status. This value isn't used. */\n  UNKNOWN_STATUS = 'UNKNOWN_STATUS',\n  /** Identity is pending verification, owner approval, or both. */\n  PENDING = 'PENDING',\n  /** Identity is active and can log in. */\n  ACTIVE = 'ACTIVE',\n  /** Identity is deleted. This identity can't log in. */\n  DELETED = 'DELETED',\n  /** Identity is blocked. This identity can't log in. */\n  BLOCKED = 'BLOCKED',\n  /** Identity is offline. This identity can't log in. */\n  OFFLINE = 'OFFLINE',\n}\n\n/** @enumType */\nexport type StatusNameWithLiterals =\n  | StatusName\n  | 'UNKNOWN_STATUS'\n  | 'PENDING'\n  | 'ACTIVE'\n  | 'DELETED'\n  | 'BLOCKED'\n  | 'OFFLINE';\n\nexport enum Reason {\n  /** Unknown reason. This value isn't used. */\n  UNKNOWN_REASON = 'UNKNOWN_REASON',\n  /** The identity is waiting for admin approval. After the approval, the identity has an `ACTIVE` status. */\n  PENDING_ADMIN_APPROVAL_REQUIRED = 'PENDING_ADMIN_APPROVAL_REQUIRED',\n  /** The identity has to verify the email. After the verification, the identity has an `ACTIVE` status. */\n  PENDING_EMAIL_VERIFICATION_REQUIRED = 'PENDING_EMAIL_VERIFICATION_REQUIRED',\n}\n\n/** @enumType */\nexport type ReasonWithLiterals =\n  | Reason\n  | 'UNKNOWN_REASON'\n  | 'PENDING_ADMIN_APPROVAL_REQUIRED'\n  | 'PENDING_EMAIL_VERIFICATION_REQUIRED';\n\nexport interface Factor {\n  /**\n   * Factor ID.\n   * @format GUID\n   */\n  factorId?: string;\n  /** Factor type. */\n  type?: FactorTypeWithLiterals;\n  /** Factor status. */\n  status?: StatusWithLiterals;\n}\n\nexport enum FactorType {\n  /** Unknown factor type. */\n  UNKNOWN_FACTOR_TYPE = 'UNKNOWN_FACTOR_TYPE',\n  /** Requires a password. */\n  PASSWORD = 'PASSWORD',\n  /** Requires a code sent via SMS. */\n  SMS = 'SMS',\n  /** Requires a code sent by phone call. */\n  CALL = 'CALL',\n  /** Requires a code sent by email. */\n  EMAIL = 'EMAIL',\n  /** Requires authentication via an authenticator app. */\n  TOTP = 'TOTP',\n  /** Requires authentication via a push notification. */\n  PUSH = 'PUSH',\n  /** Requires authentication via WebAuthn/passkey. */\n  WEBAUTHN = 'WEBAUTHN',\n  /** Requires a recovery code. */\n  RECOVERY_CODE = 'RECOVERY_CODE',\n}\n\n/** @enumType */\nexport type FactorTypeWithLiterals =\n  | FactorType\n  | 'UNKNOWN_FACTOR_TYPE'\n  | 'PASSWORD'\n  | 'SMS'\n  | 'CALL'\n  | 'EMAIL'\n  | 'TOTP'\n  | 'PUSH'\n  | 'WEBAUTHN'\n  | 'RECOVERY_CODE';\n\nexport enum Status {\n  /** Factor requires activation. */\n  INACTIVE = 'INACTIVE',\n  /** Factor is active and can be used for authentication. */\n  ACTIVE = 'ACTIVE',\n  /** Factor is blocked and cannot be used for authentication. The user should reenroll the factor. */\n  REQUIRE_REENROLL = 'REQUIRE_REENROLL',\n}\n\n/** @enumType */\nexport type StatusWithLiterals =\n  | Status\n  | 'INACTIVE'\n  | 'ACTIVE'\n  | 'REQUIRE_REENROLL';\n\nexport interface CustomValue extends CustomValueValueOneOf {\n  /** String value. */\n  strValue?: string;\n  /** Number value. */\n  numValue?: number;\n  /** Date value. */\n  dateValue?: Date | null;\n  /** List value. */\n  listValue?: ListValue;\n  /** Map value. */\n  mapValue?: MapValue;\n}\n\n/** @oneof */\nexport interface CustomValueValueOneOf {\n  /** String value. */\n  strValue?: string;\n  /** Number value. */\n  numValue?: number;\n  /** Date value. */\n  dateValue?: Date | null;\n  /** List value. */\n  listValue?: ListValue;\n  /** Map value. */\n  mapValue?: MapValue;\n}\n\nexport interface ListValue {\n  /** Custom value. */\n  value?: CustomValue[];\n}\n\nexport interface MapValue {\n  /** Mapped custom value. */\n  value?: Record<string, CustomValue>;\n}\n\nexport interface RequireMfaData {\n  /**\n   * The factors available for the user to perform the required MFA.\n   * @maxSize 100\n   */\n  availableFactors?: V1Factor[];\n  /** The reason the user is required to perform MFA. */\n  reason?: MfaReasonWithLiterals;\n}\n\nexport interface V1Factor {\n  /** Type of verification factor. */\n  factorType?: FactorTypeWithLiterals;\n  /** Availability status for second factor */\n  factorStatus?: FactorStatusWithLiterals;\n}\n\nexport enum FactorStatus {\n  UNKNOWN_FACTOR_STATUS = 'UNKNOWN_FACTOR_STATUS',\n  ENABLED = 'ENABLED',\n  REQUIRE_ACTIVATION = 'REQUIRE_ACTIVATION',\n  REQUIRE_REENROLL = 'REQUIRE_REENROLL',\n  ENABLED_BY_RULE = 'ENABLED_BY_RULE',\n  DISABLED_BY_RULE = 'DISABLED_BY_RULE',\n}\n\n/** @enumType */\nexport type FactorStatusWithLiterals =\n  | FactorStatus\n  | 'UNKNOWN_FACTOR_STATUS'\n  | 'ENABLED'\n  | 'REQUIRE_ACTIVATION'\n  | 'REQUIRE_REENROLL'\n  | 'ENABLED_BY_RULE'\n  | 'DISABLED_BY_RULE';\n\nexport enum MfaReason {\n  UNKNOWN_MFA_REASON = 'UNKNOWN_MFA_REASON',\n  /** Mfa is required due to user settings */\n  USER_SETTINGS = 'USER_SETTINGS',\n  /** Mfa is required due to high risk login */\n  HIGH_RISK_LOGIN = 'HIGH_RISK_LOGIN',\n}\n\n/** @enumType */\nexport type MfaReasonWithLiterals =\n  | MfaReason\n  | 'UNKNOWN_MFA_REASON'\n  | 'USER_SETTINGS'\n  | 'HIGH_RISK_LOGIN';\n\nexport interface MfaChallengeData {\n  /** Type of verifation factor. */\n  factorType?: FactorTypeWithLiterals;\n  verificationChallengeData?: VerificationChallenge;\n  /**\n   * Factors types the user can choose from to verify themselves.\n   * @maxSize 100\n   */\n  availableFactors?: V1Factor[];\n  /** The reason the user is required for verification. */\n  reason?: MfaReasonWithLiterals;\n}\n\nexport interface VerificationChallenge\n  extends VerificationChallengeFactorChallengeDataOneOf {\n  pushData?: PushChallengeData;\n  webauthnData?: WebAuthnChallengeData;\n  /** @maxLength 200 */\n  hint?: string | null;\n}\n\n/** @oneof */\nexport interface VerificationChallengeFactorChallengeDataOneOf {\n  pushData?: PushChallengeData;\n  webauthnData?: WebAuthnChallengeData;\n}\n\nexport interface PushChallengeData {\n  /**\n   * This should be tied to a specific push notification.\n   * It will be sent in subsequent requests to verify the factor.\n   * @maxLength 36\n   */\n  transactionId?: string;\n}\n\nexport interface WebAuthnChallengeData {\n  /**\n   * A unique identifier for this challenge that will be used to correlate\n   * the authentication response with this challenge.\n   * This should be a cryptographically random GUID to prevent guessing attacks.\n   * @format GUID\n   */\n  challengeId?: string;\n  /**\n   * The challenge that will be signed by the authenticator during the WebAuthn authentication ceremony.\n   * This should be a cryptographically secure random value with at least 16 bytes of entropy.\n   * The value is used to prevent replay attacks and MUST be randomly generated by the implementer.\n   */\n  challenge?: Uint8Array;\n  /**\n   * The timeout in milliseconds for the WebAuthn authentication ceremony.\n   * After this time, the challenge will be considered expired and the authentication will need to be restarted.\n   * This is optional and may be overridden by the client if provided.\n   * The WebAuthn spec recommends a timeout of at least 1 minute (60000ms).\n   */\n  timeoutMs?: number | null;\n  /**\n   * Optional list of credentials that are acceptable for this authentication ceremony.\n   * If empty, all credentials associated with the user will be considered.\n   * @maxSize 50\n   */\n  allowCredentials?: PublicKeyCredentialDescriptor[];\n  /** Specifies the requirement for user verification during the authentication ceremony. */\n  userVerification?: UserVerificationRequirementWithLiterals;\n  /**\n   * Optional hints to guide the client UI\n   * Examples include \"security-key\" to emphasize external authenticators\n   * or \"client-device\" to emphasize built-in authenticators\n   * @maxLength 50\n   * @maxSize 10\n   */\n  hints?: string[];\n  /**\n   * Optional extensions for the authentication ceremony\n   * Provides additional parameters for specialized WebAuthn functionality\n   */\n  extensions?: AuthenticationExtensionInputs;\n}\n\nexport interface PublicKeyCredentialDescriptor {\n  /** The credential ID */\n  id?: Uint8Array;\n  /**\n   * An optional hint as to the transports used by the credential\n   * Examples include \"usb\", \"nfc\", \"ble\", \"internal\", \"hybrid\"\n   * @maxLength 50\n   * @maxSize 10\n   */\n  transports?: string[];\n}\n\nexport enum UserVerificationRequirement {\n  /** Default unspecified value */\n  USER_VERIFICATION_UNSPECIFIED = 'USER_VERIFICATION_UNSPECIFIED',\n  /**\n   * The Relying Party requires user verification and will fail the operation if the response doesn't have the UV flag\n   * set\n   */\n  USER_VERIFICATION_REQUIRED = 'USER_VERIFICATION_REQUIRED',\n  /** The Relying Party prefers user verification but will not fail the operation if unavailable */\n  USER_VERIFICATION_PREFERRED = 'USER_VERIFICATION_PREFERRED',\n  /** The Relying Party does not want user verification employed (e.g., to minimize disruption to the user experience) */\n  USER_VERIFICATION_DISCOURAGED = 'USER_VERIFICATION_DISCOURAGED',\n}\n\n/** @enumType */\nexport type UserVerificationRequirementWithLiterals =\n  | UserVerificationRequirement\n  | 'USER_VERIFICATION_UNSPECIFIED'\n  | 'USER_VERIFICATION_REQUIRED'\n  | 'USER_VERIFICATION_PREFERRED'\n  | 'USER_VERIFICATION_DISCOURAGED';\n\nexport interface AuthenticationExtensionInputs\n  extends AuthenticationExtensionInputsLargeBlobOperationOneOf {\n  /** Read existing large blob data from the authenticator */\n  largeBlobRead?: boolean;\n  /** Write data to the authenticator's large blob storage */\n  largeBlobWrite?: Uint8Array;\n  /**\n   * FIDO AppID Extension (appid)\n   * An AppID that was used for previously registered U2F authenticators\n   * This makes already-registered U2F credentials forward-compatible with the WebAuthn API\n   * @maxLength 256\n   */\n  appid?: string;\n  /**\n   * User Verification Method Extension (uvm)\n   * Requests the authenticator to report which verification methods were used\n   * Examples include fingerprint, PIN, or facial recognition\n   */\n  uvm?: boolean;\n}\n\n/** @oneof */\nexport interface AuthenticationExtensionInputsLargeBlobOperationOneOf {\n  /** Read existing large blob data from the authenticator */\n  largeBlobRead?: boolean;\n  /** Write data to the authenticator's large blob storage */\n  largeBlobWrite?: Uint8Array;\n}\n","import * as ambassadorWixIamVerificationV1StartResponse from './iam-verification-v1-start-response-verification.http.js';\nimport * as ambassadorWixIamVerificationV1StartResponseTypes from './iam-verification-v1-start-response-verification.types.js';\nimport * as ambassadorWixIamVerificationV1StartResponseUniversalTypes from './iam-verification-v1-start-response-verification.universal.js';\n\nexport type __PublicMethodMetaInfo<\n  K = string,\n  M = unknown,\n  T = unknown,\n  S = unknown,\n  Q = unknown,\n  R = unknown\n> = {\n  getUrl: (context: any) => string;\n  httpMethod: K;\n  path: string;\n  pathParams: M;\n  __requestType: T;\n  __originalRequestType: S;\n  __responseType: Q;\n  __originalResponseType: R;\n};\n\nexport function start(): __PublicMethodMetaInfo<\n  'POST',\n  {},\n  ambassadorWixIamVerificationV1StartResponseUniversalTypes.StartRequest,\n  ambassadorWixIamVerificationV1StartResponseTypes.StartRequest,\n  ambassadorWixIamVerificationV1StartResponseUniversalTypes.StartResponse,\n  ambassadorWixIamVerificationV1StartResponseTypes.StartResponse\n> {\n  const payload = {} as any;\n\n  const getRequestOptions =\n    ambassadorWixIamVerificationV1StartResponse.start(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v1/Start',\n    pathParams: {},\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function verifyDuringAuthentication(): __PublicMethodMetaInfo<\n  'POST',\n  {},\n  ambassadorWixIamVerificationV1StartResponseUniversalTypes.VerifyDuringAuthenticationRequest,\n  ambassadorWixIamVerificationV1StartResponseTypes.VerifyDuringAuthenticationRequest,\n  ambassadorWixIamVerificationV1StartResponseUniversalTypes.StateMachineResponse,\n  ambassadorWixIamVerificationV1StartResponseTypes.StateMachineResponse\n> {\n  const payload = {} as any;\n\n  const getRequestOptions =\n    ambassadorWixIamVerificationV1StartResponse.verifyDuringAuthentication(\n      payload\n    );\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v1/auth/verify',\n    pathParams: {},\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport {\n  StartResponse as StartResponseOriginal,\n  StartRequest as StartRequestOriginal,\n  Target as TargetOriginal,\n  TargetWithLiterals as TargetWithLiteralsOriginal,\n  VerifyRequest as VerifyRequestOriginal,\n  VerifyResponse as VerifyResponseOriginal,\n  VerifyDuringAuthenticationRequest as VerifyDuringAuthenticationRequestOriginal,\n  StateMachineResponse as StateMachineResponseOriginal,\n  StateMachineResponseStateDataOneOf as StateMachineResponseStateDataOneOfOriginal,\n  StateType as StateTypeOriginal,\n  StateTypeWithLiterals as StateTypeWithLiteralsOriginal,\n  Identity as IdentityOriginal,\n  Connection as ConnectionOriginal,\n  ConnectionTypeOneOf as ConnectionTypeOneOfOriginal,\n  IdpConnection as IdpConnectionOriginal,\n  AuthenticatorConnection as AuthenticatorConnectionOriginal,\n  IdentityProfile as IdentityProfileOriginal,\n  PrivacyStatus as PrivacyStatusOriginal,\n  PrivacyStatusWithLiterals as PrivacyStatusWithLiteralsOriginal,\n  CustomField as CustomFieldOriginal,\n  V1CustomValue as V1CustomValueOriginal,\n  V1CustomValueValueOneOf as V1CustomValueValueOneOfOriginal,\n  V1ListValue as V1ListValueOriginal,\n  V1MapValue as V1MapValueOriginal,\n  SecondaryEmail as SecondaryEmailOriginal,\n  EmailTag as EmailTagOriginal,\n  EmailTagWithLiterals as EmailTagWithLiteralsOriginal,\n  Phone as PhoneOriginal,\n  PhoneTag as PhoneTagOriginal,\n  PhoneTagWithLiterals as PhoneTagWithLiteralsOriginal,\n  AddressWrapper as AddressWrapperOriginal,\n  Address as AddressOriginal,\n  AddressTag as AddressTagOriginal,\n  AddressTagWithLiterals as AddressTagWithLiteralsOriginal,\n  Metadata as MetadataOriginal,\n  Email as EmailOriginal,\n  StatusV2 as StatusV2Original,\n  StatusName as StatusNameOriginal,\n  StatusNameWithLiterals as StatusNameWithLiteralsOriginal,\n  Reason as ReasonOriginal,\n  ReasonWithLiterals as ReasonWithLiteralsOriginal,\n  Factor as FactorOriginal,\n  FactorType as FactorTypeOriginal,\n  FactorTypeWithLiterals as FactorTypeWithLiteralsOriginal,\n  Status as StatusOriginal,\n  StatusWithLiterals as StatusWithLiteralsOriginal,\n  CustomValue as CustomValueOriginal,\n  CustomValueValueOneOf as CustomValueValueOneOfOriginal,\n  ListValue as ListValueOriginal,\n  MapValue as MapValueOriginal,\n  RequireMfaData as RequireMfaDataOriginal,\n  V1Factor as V1FactorOriginal,\n  FactorStatus as FactorStatusOriginal,\n  FactorStatusWithLiterals as FactorStatusWithLiteralsOriginal,\n  MfaReason as MfaReasonOriginal,\n  MfaReasonWithLiterals as MfaReasonWithLiteralsOriginal,\n  MfaChallengeData as MfaChallengeDataOriginal,\n  VerificationChallenge as VerificationChallengeOriginal,\n  VerificationChallengeFactorChallengeDataOneOf as VerificationChallengeFactorChallengeDataOneOfOriginal,\n  PushChallengeData as PushChallengeDataOriginal,\n  WebAuthnChallengeData as WebAuthnChallengeDataOriginal,\n  PublicKeyCredentialDescriptor as PublicKeyCredentialDescriptorOriginal,\n  UserVerificationRequirement as UserVerificationRequirementOriginal,\n  UserVerificationRequirementWithLiterals as UserVerificationRequirementWithLiteralsOriginal,\n  AuthenticationExtensionInputs as AuthenticationExtensionInputsOriginal,\n  AuthenticationExtensionInputsLargeBlobOperationOneOf as AuthenticationExtensionInputsLargeBlobOperationOneOfOriginal,\n} from './iam-verification-v1-start-response-verification.types.js';\n"],"mappings":"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","names":["start","verifyDuringAuthentication","payload","Target","StateType","PrivacyStatus","EmailTag","PhoneTag","AddressTag","StatusName","Reason","FactorType","Status","FactorStatus","MfaReason","UserVerificationRequirement","start","verifyDuringAuthentication"]}