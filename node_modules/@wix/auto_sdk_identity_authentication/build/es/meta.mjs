// src/iam-authentication-v1-authentication-authentication.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTBytesToSDKBytes } from "@wix/sdk-runtime/transformations/bytes";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixIamAuthenticationV1AuthenticationServiceUrl(opts) {
  const domainToMappings = {
    _: [
      {
        srcPath: "/_api/iam/authentication",
        destPath: ""
      }
    ],
    "users._base_domain_": [
      {
        srcPath: "/iam/wix/google",
        destPath: "/v1/sso/callback/root/0e6a50f5-b523-4e29-990d-f37fa2ffdd69"
      },
      {
        srcPath: "/authentication",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/_api/iam/authentication",
        destPath: ""
      },
      {
        srcPath: "/iam/authentication",
        destPath: ""
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/_api/iam/authentication",
        destPath: ""
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/_api/iam/authentication",
        destPath: ""
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/_api/iam/authentication",
        destPath: ""
      }
    ],
    "dev._base_domain_": [
      {
        srcPath: "/_api/iam/authentication",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/authentication",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/iam/authentication",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/iam/authentication/v2/sign-on",
        destPath: "/v2/sign-on"
      },
      {
        srcPath: "/iam/authentication/v1/logout",
        destPath: "/v1/logout"
      },
      {
        srcPath: "/iam/authentication/v2/change-password",
        destPath: "/v2/change-password"
      },
      {
        srcPath: "/iam/authentication/v2/verify",
        destPath: "/v2/verify"
      },
      {
        srcPath: "/iam/authentication/v2/login",
        destPath: "/v2/login"
      },
      {
        srcPath: "/iam/authentication/v2/register",
        destPath: "/v2/register"
      },
      {
        srcPath: "/iam/authentication/v2",
        destPath: "/v2"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_identity_authentication";
function registerV2(payload) {
  function __registerV2({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [{ path: "profile.customFields.value.numValue" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "profile.customFields.value.dateValue" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.iam.authentication.v1.authentication",
      method: "POST",
      methodFqn: "wix.iam.authentication.v1.AuthenticationService.RegisterV2",
      packageName: PACKAGE_NAME,
      migrationOptions: {
        optInTransformResponse: true
      },
      url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
        protoPath: "/v2/register",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTBytesToSDKBytes,
          paths: [
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.challenge"
            },
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.allowCredentials.id"
            },
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.extensions.largeBlobWrite"
            }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "identity.createdDate" },
            { path: "identity.updatedDate" },
            { path: "identity.identityProfile.customFields.value.dateValue" },
            { path: "additionalData.*.dateValue" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "identity.identityProfile.customFields.value.numValue" },
            { path: "additionalData.*.numValue" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __registerV2;
}
function loginV2(payload) {
  function __loginV2({ host }) {
    const metadata = {
      entityFqdn: "wix.iam.authentication.v1.authentication",
      method: "POST",
      methodFqn: "wix.iam.authentication.v1.AuthenticationService.LoginV2",
      packageName: PACKAGE_NAME,
      migrationOptions: {
        optInTransformResponse: true
      },
      url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
        protoPath: "/v2/login",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTBytesToSDKBytes,
          paths: [
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.challenge"
            },
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.allowCredentials.id"
            },
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.extensions.largeBlobWrite"
            }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "identity.createdDate" },
            { path: "identity.updatedDate" },
            { path: "identity.identityProfile.customFields.value.dateValue" },
            { path: "additionalData.*.dateValue" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "identity.identityProfile.customFields.value.numValue" },
            { path: "additionalData.*.numValue" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __loginV2;
}
function changePassword(payload) {
  function __changePassword({ host }) {
    const metadata = {
      entityFqdn: "wix.iam.authentication.v1.authentication",
      method: "POST",
      methodFqn: "wix.iam.authentication.v1.AuthenticationService.ChangePassword",
      packageName: PACKAGE_NAME,
      migrationOptions: {
        optInTransformResponse: true
      },
      url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
        protoPath: "/v2/change-password",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __changePassword;
}
function signOn(payload) {
  function __signOn({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [{ path: "profile.customFields.value.numValue" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "profile.customFields.value.dateValue" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.iam.authentication.v1.authentication",
      method: "POST",
      methodFqn: "wix.iam.authentication.v1.AuthenticationService.SignOn",
      packageName: PACKAGE_NAME,
      migrationOptions: {
        optInTransformResponse: true
      },
      url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
        protoPath: "/v2/sign-on",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "identity.createdDate" },
            { path: "identity.updatedDate" },
            { path: "identity.identityProfile.customFields.value.dateValue" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "identity.identityProfile.customFields.value.numValue" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __signOn;
}
function logout(payload) {
  function __logout({ host }) {
    const metadata = {
      entityFqdn: "wix.iam.authentication.v1.authentication",
      method: "GET",
      methodFqn: "wix.iam.authentication.v1.AuthenticationService.Logout",
      packageName: PACKAGE_NAME,
      migrationOptions: {
        optInTransformResponse: true
      },
      url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
        protoPath: "/v1/logout",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTBytesToSDKBytes,
          paths: [{ path: "body" }]
        }
      ])
    };
    return metadata;
  }
  return __logout;
}
function verify(payload) {
  function __verify({ host }) {
    const metadata = {
      entityFqdn: "wix.iam.authentication.v1.authentication",
      method: "POST",
      methodFqn: "wix.iam.authentication.v1.AuthenticationService.Verify",
      packageName: PACKAGE_NAME,
      migrationOptions: {
        optInTransformResponse: true
      },
      url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
        protoPath: "/v2/{factorType}/verify",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTBytesToSDKBytes,
          paths: [
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.challenge"
            },
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.allowCredentials.id"
            },
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.extensions.largeBlobWrite"
            }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "identity.createdDate" },
            { path: "identity.updatedDate" },
            { path: "identity.identityProfile.customFields.value.dateValue" },
            { path: "additionalData.*.dateValue" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "identity.identityProfile.customFields.value.numValue" },
            { path: "additionalData.*.numValue" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __verify;
}

// src/iam-authentication-v1-authentication-authentication.types.ts
var PrivacyStatus = /* @__PURE__ */ ((PrivacyStatus2) => {
  PrivacyStatus2["UNDEFINED"] = "UNDEFINED";
  PrivacyStatus2["PUBLIC"] = "PUBLIC";
  PrivacyStatus2["PRIVATE"] = "PRIVATE";
  return PrivacyStatus2;
})(PrivacyStatus || {});
var EmailTag = /* @__PURE__ */ ((EmailTag2) => {
  EmailTag2["UNTAGGED"] = "UNTAGGED";
  EmailTag2["MAIN"] = "MAIN";
  EmailTag2["HOME"] = "HOME";
  EmailTag2["WORK"] = "WORK";
  return EmailTag2;
})(EmailTag || {});
var PhoneTag = /* @__PURE__ */ ((PhoneTag2) => {
  PhoneTag2["UNTAGGED"] = "UNTAGGED";
  PhoneTag2["MAIN"] = "MAIN";
  PhoneTag2["HOME"] = "HOME";
  PhoneTag2["MOBILE"] = "MOBILE";
  PhoneTag2["WORK"] = "WORK";
  PhoneTag2["FAX"] = "FAX";
  return PhoneTag2;
})(PhoneTag || {});
var AddressTag = /* @__PURE__ */ ((AddressTag2) => {
  AddressTag2["UNTAGGED"] = "UNTAGGED";
  AddressTag2["HOME"] = "HOME";
  AddressTag2["WORK"] = "WORK";
  AddressTag2["BILLING"] = "BILLING";
  AddressTag2["SHIPPING"] = "SHIPPING";
  return AddressTag2;
})(AddressTag || {});
var StateType = /* @__PURE__ */ ((StateType2) => {
  StateType2["UNKNOWN_STATE"] = "UNKNOWN_STATE";
  StateType2["SUCCESS"] = "SUCCESS";
  StateType2["REQUIRE_OWNER_APPROVAL"] = "REQUIRE_OWNER_APPROVAL";
  StateType2["REQUIRE_EMAIL_VERIFICATION"] = "REQUIRE_EMAIL_VERIFICATION";
  StateType2["STATUS_CHECK"] = "STATUS_CHECK";
  return StateType2;
})(StateType || {});
var StatusName = /* @__PURE__ */ ((StatusName2) => {
  StatusName2["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
  StatusName2["PENDING"] = "PENDING";
  StatusName2["ACTIVE"] = "ACTIVE";
  StatusName2["DELETED"] = "DELETED";
  StatusName2["BLOCKED"] = "BLOCKED";
  StatusName2["OFFLINE"] = "OFFLINE";
  return StatusName2;
})(StatusName || {});
var Reason = /* @__PURE__ */ ((Reason2) => {
  Reason2["UNKNOWN_REASON"] = "UNKNOWN_REASON";
  Reason2["PENDING_ADMIN_APPROVAL_REQUIRED"] = "PENDING_ADMIN_APPROVAL_REQUIRED";
  Reason2["PENDING_EMAIL_VERIFICATION_REQUIRED"] = "PENDING_EMAIL_VERIFICATION_REQUIRED";
  return Reason2;
})(Reason || {});
var FactorType = /* @__PURE__ */ ((FactorType2) => {
  FactorType2["UNKNOWN_FACTOR_TYPE"] = "UNKNOWN_FACTOR_TYPE";
  FactorType2["PASSWORD"] = "PASSWORD";
  FactorType2["SMS"] = "SMS";
  FactorType2["CALL"] = "CALL";
  FactorType2["EMAIL"] = "EMAIL";
  FactorType2["TOTP"] = "TOTP";
  FactorType2["PUSH"] = "PUSH";
  FactorType2["WEBAUTHN"] = "WEBAUTHN";
  FactorType2["RECOVERY_CODE"] = "RECOVERY_CODE";
  return FactorType2;
})(FactorType || {});
var Status = /* @__PURE__ */ ((Status2) => {
  Status2["INACTIVE"] = "INACTIVE";
  Status2["ACTIVE"] = "ACTIVE";
  Status2["REQUIRE_REENROLL"] = "REQUIRE_REENROLL";
  return Status2;
})(Status || {});
var FactorStatus = /* @__PURE__ */ ((FactorStatus2) => {
  FactorStatus2["UNKNOWN_FACTOR_STATUS"] = "UNKNOWN_FACTOR_STATUS";
  FactorStatus2["ENABLED"] = "ENABLED";
  FactorStatus2["REQUIRE_ACTIVATION"] = "REQUIRE_ACTIVATION";
  FactorStatus2["REQUIRE_REENROLL"] = "REQUIRE_REENROLL";
  FactorStatus2["ENABLED_BY_RULE"] = "ENABLED_BY_RULE";
  FactorStatus2["DISABLED_BY_RULE"] = "DISABLED_BY_RULE";
  return FactorStatus2;
})(FactorStatus || {});
var MfaReason = /* @__PURE__ */ ((MfaReason2) => {
  MfaReason2["UNKNOWN_MFA_REASON"] = "UNKNOWN_MFA_REASON";
  MfaReason2["USER_SETTINGS"] = "USER_SETTINGS";
  MfaReason2["HIGH_RISK_LOGIN"] = "HIGH_RISK_LOGIN";
  return MfaReason2;
})(MfaReason || {});
var UserVerificationRequirement = /* @__PURE__ */ ((UserVerificationRequirement2) => {
  UserVerificationRequirement2["USER_VERIFICATION_UNSPECIFIED"] = "USER_VERIFICATION_UNSPECIFIED";
  UserVerificationRequirement2["USER_VERIFICATION_REQUIRED"] = "USER_VERIFICATION_REQUIRED";
  UserVerificationRequirement2["USER_VERIFICATION_PREFERRED"] = "USER_VERIFICATION_PREFERRED";
  UserVerificationRequirement2["USER_VERIFICATION_DISCOURAGED"] = "USER_VERIFICATION_DISCOURAGED";
  return UserVerificationRequirement2;
})(UserVerificationRequirement || {});
var TenantType = /* @__PURE__ */ ((TenantType2) => {
  TenantType2["UNKNOWN_TENANT_TYPE"] = "UNKNOWN_TENANT_TYPE";
  TenantType2["ACCOUNT"] = "ACCOUNT";
  TenantType2["SITE"] = "SITE";
  return TenantType2;
})(TenantType || {});

// src/iam-authentication-v1-authentication-authentication.meta.ts
function registerV22() {
  const payload = {};
  const getRequestOptions = registerV2(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v2/register",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function loginV22() {
  const payload = {};
  const getRequestOptions = loginV2(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v2/login",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function changePassword2() {
  const payload = {};
  const getRequestOptions = changePassword(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v2/change-password",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function signOn2() {
  const payload = {};
  const getRequestOptions = signOn(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v2/sign-on",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function logout2() {
  const payload = {};
  const getRequestOptions = logout(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/logout",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function verify2() {
  const payload = { factorType: ":factorType" };
  const getRequestOptions = verify(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v2/{factorType}/verify",
    pathParams: { factorType: "factorType" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
export {
  AddressTag as AddressTagOriginal,
  EmailTag as EmailTagOriginal,
  FactorStatus as FactorStatusOriginal,
  FactorType as FactorTypeOriginal,
  MfaReason as MfaReasonOriginal,
  PhoneTag as PhoneTagOriginal,
  PrivacyStatus as PrivacyStatusOriginal,
  Reason as ReasonOriginal,
  StateType as StateTypeOriginal,
  StatusName as StatusNameOriginal,
  Status as StatusOriginal,
  TenantType as TenantTypeOriginal,
  UserVerificationRequirement as UserVerificationRequirementOriginal,
  changePassword2 as changePassword,
  loginV22 as loginV2,
  logout2 as logout,
  registerV22 as registerV2,
  signOn2 as signOn,
  verify2 as verify
};
//# sourceMappingURL=meta.mjs.map