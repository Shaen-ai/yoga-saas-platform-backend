{"version":3,"sources":["../../../src/iam-authentication-v1-authentication-authentication.http.ts","../../../src/iam-authentication-v1-authentication-authentication.types.ts","../../../src/iam-authentication-v1-authentication-authentication.meta.ts"],"sourcesContent":["import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';\nimport { transformSDKFloatToRESTFloat } from '@wix/sdk-runtime/transformations/float';\nimport { transformRESTFloatToSDKFloat } from '@wix/sdk-runtime/transformations/float';\nimport { transformRESTBytesToSDKBytes } from '@wix/sdk-runtime/transformations/bytes';\nimport { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveWixIamAuthenticationV1AuthenticationServiceUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    _: [\n      {\n        srcPath: '/_api/iam/authentication',\n        destPath: '',\n      },\n    ],\n    'users._base_domain_': [\n      {\n        srcPath: '/iam/wix/google',\n        destPath: '/v1/sso/callback/root/0e6a50f5-b523-4e29-990d-f37fa2ffdd69',\n      },\n      {\n        srcPath: '/authentication',\n        destPath: '',\n      },\n    ],\n    'www.wixapis.com': [\n      {\n        srcPath: '/_api/iam/authentication',\n        destPath: '',\n      },\n      {\n        srcPath: '/iam/authentication',\n        destPath: '',\n      },\n    ],\n    'bo._base_domain_': [\n      {\n        srcPath: '/_api/iam/authentication',\n        destPath: '',\n      },\n    ],\n    'wixbo.ai': [\n      {\n        srcPath: '/_api/iam/authentication',\n        destPath: '',\n      },\n    ],\n    'wix-bo.com': [\n      {\n        srcPath: '/_api/iam/authentication',\n        destPath: '',\n      },\n    ],\n    'dev._base_domain_': [\n      {\n        srcPath: '/_api/iam/authentication',\n        destPath: '',\n      },\n    ],\n    'manage._base_domain_': [\n      {\n        srcPath: '/_api/authentication',\n        destPath: '',\n      },\n    ],\n    'www._base_domain_': [\n      {\n        srcPath: '/_api/iam/authentication',\n        destPath: '',\n      },\n    ],\n    '*.dev.wix-code.com': [\n      {\n        srcPath: '/iam/authentication/v2/sign-on',\n        destPath: '/v2/sign-on',\n      },\n      {\n        srcPath: '/iam/authentication/v1/logout',\n        destPath: '/v1/logout',\n      },\n      {\n        srcPath: '/iam/authentication/v2/change-password',\n        destPath: '/v2/change-password',\n      },\n      {\n        srcPath: '/iam/authentication/v2/verify',\n        destPath: '/v2/verify',\n      },\n      {\n        srcPath: '/iam/authentication/v2/login',\n        destPath: '/v2/login',\n      },\n      {\n        srcPath: '/iam/authentication/v2/register',\n        destPath: '/v2/register',\n      },\n      {\n        srcPath: '/iam/authentication/v2',\n        destPath: '/v2',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_identity_authentication';\n\n/**\n * Registers a new member.\n *\n * Typically, after a successful registration, you generate and use member tokens for the\n * registered member so that subsequent API calls are called as part of a member session.\n * Use the `sessionToken` in the response to [get the site member's access and refresh tokens](https://dev.wix.com/docs/go-headless/coding/rest-api/visitors-and-members/handle-members-with-custom-login#get-the-site-members-access-and-refresh-tokens).\n *\n * If the email used to register the member already exists as a contact email, the registering\n * member need to verify the email address using a code that is sent to the address.\n */\nexport function registerV2(payload: object): RequestOptionsFactory<any> {\n  function __registerV2({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKFloatToRESTFloat,\n        paths: [{ path: 'profile.customFields.value.numValue' }],\n      },\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'profile.customFields.value.dateValue' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.iam.authentication.v1.authentication',\n      method: 'POST' as any,\n      methodFqn: 'wix.iam.authentication.v1.AuthenticationService.RegisterV2',\n      packageName: PACKAGE_NAME,\n      migrationOptions: {\n        optInTransformResponse: true,\n      },\n      url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({\n        protoPath: '/v2/register',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTBytesToSDKBytes,\n            paths: [\n              {\n                path: 'mfaChallengeData.verificationChallengeData.webauthnData.challenge',\n              },\n              {\n                path: 'mfaChallengeData.verificationChallengeData.webauthnData.allowCredentials.id',\n              },\n              {\n                path: 'mfaChallengeData.verificationChallengeData.webauthnData.extensions.largeBlobWrite',\n              },\n            ],\n          },\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'identity.createdDate' },\n              { path: 'identity.updatedDate' },\n              { path: 'identity.identityProfile.customFields.value.dateValue' },\n              { path: 'additionalData.*.dateValue' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'identity.identityProfile.customFields.value.numValue' },\n              { path: 'additionalData.*.numValue' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __registerV2;\n}\n\n/**\n * Logs in an existing member.\n *\n * Typically, after a successful login, you generate and use member tokens for the\n * logged-in member so that subsequent API calls are called as part of a member session.\n * Use the `sessionToken` in the response to [get the site member's access and refresh tokens](https://dev.wix.com/docs/go-headless/coding/rest-api/visitors-and-members/handle-members-with-custom-login#get-the-site-members-access-and-refresh-tokens).\n */\nexport function loginV2(payload: object): RequestOptionsFactory<any> {\n  function __loginV2({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.iam.authentication.v1.authentication',\n      method: 'POST' as any,\n      methodFqn: 'wix.iam.authentication.v1.AuthenticationService.LoginV2',\n      packageName: PACKAGE_NAME,\n      migrationOptions: {\n        optInTransformResponse: true,\n      },\n      url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({\n        protoPath: '/v2/login',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTBytesToSDKBytes,\n            paths: [\n              {\n                path: 'mfaChallengeData.verificationChallengeData.webauthnData.challenge',\n              },\n              {\n                path: 'mfaChallengeData.verificationChallengeData.webauthnData.allowCredentials.id',\n              },\n              {\n                path: 'mfaChallengeData.verificationChallengeData.webauthnData.extensions.largeBlobWrite',\n              },\n            ],\n          },\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'identity.createdDate' },\n              { path: 'identity.updatedDate' },\n              { path: 'identity.identityProfile.customFields.value.dateValue' },\n              { path: 'additionalData.*.dateValue' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'identity.identityProfile.customFields.value.numValue' },\n              { path: 'additionalData.*.numValue' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __loginV2;\n}\n\n/** Changes the password of a logged in user. */\nexport function changePassword(payload: object): RequestOptionsFactory<any> {\n  function __changePassword({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.iam.authentication.v1.authentication',\n      method: 'POST' as any,\n      methodFqn:\n        'wix.iam.authentication.v1.AuthenticationService.ChangePassword',\n      packageName: PACKAGE_NAME,\n      migrationOptions: {\n        optInTransformResponse: true,\n      },\n      url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({\n        protoPath: '/v2/change-password',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __changePassword;\n}\n\nexport function signOn(payload: object): RequestOptionsFactory<any> {\n  function __signOn({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKFloatToRESTFloat,\n        paths: [{ path: 'profile.customFields.value.numValue' }],\n      },\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'profile.customFields.value.dateValue' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.iam.authentication.v1.authentication',\n      method: 'POST' as any,\n      methodFqn: 'wix.iam.authentication.v1.AuthenticationService.SignOn',\n      packageName: PACKAGE_NAME,\n      migrationOptions: {\n        optInTransformResponse: true,\n      },\n      url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({\n        protoPath: '/v2/sign-on',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'identity.createdDate' },\n              { path: 'identity.updatedDate' },\n              { path: 'identity.identityProfile.customFields.value.dateValue' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'identity.identityProfile.customFields.value.numValue' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __signOn;\n}\n\n/** Logs out a member. */\nexport function logout(payload: object): RequestOptionsFactory<any> {\n  function __logout({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.iam.authentication.v1.authentication',\n      method: 'GET' as any,\n      methodFqn: 'wix.iam.authentication.v1.AuthenticationService.Logout',\n      packageName: PACKAGE_NAME,\n      migrationOptions: {\n        optInTransformResponse: true,\n      },\n      url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({\n        protoPath: '/v1/logout',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTBytesToSDKBytes,\n            paths: [{ path: 'body' }],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __logout;\n}\n\nexport function verify(payload: object): RequestOptionsFactory<any> {\n  function __verify({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.iam.authentication.v1.authentication',\n      method: 'POST' as any,\n      methodFqn: 'wix.iam.authentication.v1.AuthenticationService.Verify',\n      packageName: PACKAGE_NAME,\n      migrationOptions: {\n        optInTransformResponse: true,\n      },\n      url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({\n        protoPath: '/v2/{factorType}/verify',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTBytesToSDKBytes,\n            paths: [\n              {\n                path: 'mfaChallengeData.verificationChallengeData.webauthnData.challenge',\n              },\n              {\n                path: 'mfaChallengeData.verificationChallengeData.webauthnData.allowCredentials.id',\n              },\n              {\n                path: 'mfaChallengeData.verificationChallengeData.webauthnData.extensions.largeBlobWrite',\n              },\n            ],\n          },\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'identity.createdDate' },\n              { path: 'identity.updatedDate' },\n              { path: 'identity.identityProfile.customFields.value.dateValue' },\n              { path: 'additionalData.*.dateValue' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'identity.identityProfile.customFields.value.numValue' },\n              { path: 'additionalData.*.numValue' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __verify;\n}\n","export interface Authentication {}\n\nexport interface RegisterV2Request {\n  /** Identifier of the registering member. */\n  loginId: LoginId;\n  /** Password of the registering member. */\n  password?: string;\n  /** Profile information of registering member. */\n  profile?: IdentityProfile;\n  /** CAPTCHA tokens, when CAPTCHA setting is on. */\n  captchaTokens?: CaptchaToken[];\n  /** Additional data that's relevant for the flow. */\n  clientMetaData?: Record<string, any> | null;\n}\n\nexport interface LoginId extends LoginIdTypeOneOf {\n  /**\n   * Login email address.\n   * @format EMAIL\n   */\n  email?: string;\n}\n\n/** @oneof */\nexport interface LoginIdTypeOneOf {\n  /**\n   * Login email address.\n   * @format EMAIL\n   */\n  email?: string;\n}\n\nexport interface IdentityProfile {\n  /** Profile first name. */\n  firstName?: string | null;\n  /** Profile last name. */\n  lastName?: string | null;\n  /** Profile nickname. */\n  nickname?: string | null;\n  /** Profile picture URL. */\n  picture?: string | null;\n  /**\n   * Deprecated. Use `secondaryEmails` instead.\n   * @deprecated Deprecated. Use `secondaryEmails` instead.\n   * @replacedBy secondary_emails\n   * @targetRemovalDate 2023-11-01\n   */\n  emails?: string[];\n  /**\n   * Deprecated. Use `phonesV2` instead.\n   * @deprecated Deprecated. Use `phonesV2` instead.\n   * @replacedBy phones_v2\n   * @targetRemovalDate 2023-11-01\n   */\n  phones?: string[];\n  /**\n   * List of profile labels.\n   * @maxSize 2000\n   */\n  labels?: string[];\n  /**\n   * Profile language.\n   * @format LANGUAGE\n   */\n  language?: string | null;\n  /** Profile privacy status. */\n  privacyStatus?: PrivacyStatusWithLiterals;\n  /**\n   * Any number of custom fields. [Custom fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)\n   * are used to store additional information about your site or app's contacts.\n   */\n  customFields?: CustomField[];\n  /** List of profile email addresses. */\n  secondaryEmails?: SecondaryEmail[];\n  /** List of profile phone numbers. */\n  phonesV2?: Phone[];\n  /** List of profile physical addresses. */\n  addresses?: AddressWrapper[];\n  /**\n   * Company name.\n   * @maxLength 1000\n   */\n  company?: string | null;\n  /**\n   * Position within company.\n   * @maxLength 1000\n   */\n  position?: string | null;\n  /**\n   * Profile birthdate in `YYYY-MM-DD` format.\n   * @format LOCAL_DATE\n   */\n  birthdate?: string | null;\n  /**\n   * Profile slug.\n   * @maxLength 255\n   */\n  slug?: string | null;\n  /** Consent to be added to mailing list */\n  subscription?: boolean | null;\n  /**\n   * Government id for personal/corporate (Vat ID).\n   * @maxLength 1000\n   */\n  vatId?: string | null;\n}\n\nexport enum PrivacyStatus {\n  /** No defined privacy status. */\n  UNDEFINED = 'UNDEFINED',\n  /** Profile details, such as profile name and profile picture, are visible to other members. */\n  PUBLIC = 'PUBLIC',\n  /** Profile details aren't visible to other members. */\n  PRIVATE = 'PRIVATE',\n}\n\n/** @enumType */\nexport type PrivacyStatusWithLiterals =\n  | PrivacyStatus\n  | 'UNDEFINED'\n  | 'PUBLIC'\n  | 'PRIVATE';\n\nexport interface CustomField {\n  /**\n   * Custom field name. The name must match one of the key properties of the objects returned by\n   * [`List Extended Fields`](https://dev.wix.com/docs/rest/api-reference/contacts/extended-fields/list-extended-fields)\n   * with the `custom.` prefix removed.\n   */\n  name?: string;\n  /** Custom field value. */\n  value?: V1CustomValue;\n}\n\nexport interface V1CustomValue extends V1CustomValueValueOneOf {\n  /** String value. */\n  strValue?: string;\n  /** Number value. */\n  numValue?: number;\n  /** Date value. */\n  dateValue?: Date | null;\n  /** Array of values. */\n  listValue?: V1ListValue;\n  /** Map of values. */\n  mapValue?: V1MapValue;\n}\n\n/** @oneof */\nexport interface V1CustomValueValueOneOf {\n  /** String value. */\n  strValue?: string;\n  /** Number value. */\n  numValue?: number;\n  /** Date value. */\n  dateValue?: Date | null;\n  /** Array of values. */\n  listValue?: V1ListValue;\n  /** Map of values. */\n  mapValue?: V1MapValue;\n}\n\nexport interface V1ListValue {\n  /** Custom value. */\n  value?: V1CustomValue[];\n}\n\nexport interface V1MapValue {\n  /** Mapped custom value. */\n  value?: Record<string, V1CustomValue>;\n}\n\nexport interface SecondaryEmail {\n  /**\n   * Email address.\n   * @format EMAIL\n   */\n  email?: string;\n  /** Email tag. */\n  tag?: EmailTagWithLiterals;\n}\n\nexport enum EmailTag {\n  UNTAGGED = 'UNTAGGED',\n  MAIN = 'MAIN',\n  HOME = 'HOME',\n  WORK = 'WORK',\n}\n\n/** @enumType */\nexport type EmailTagWithLiterals =\n  | EmailTag\n  | 'UNTAGGED'\n  | 'MAIN'\n  | 'HOME'\n  | 'WORK';\n\nexport interface Phone {\n  /**\n   * Phone country code.\n   * @format COUNTRY\n   */\n  countryCode?: string | null;\n  /**\n   * Phone number.\n   * @format PHONE\n   */\n  phone?: string;\n  /** Phone tag. */\n  tag?: PhoneTagWithLiterals;\n}\n\nexport enum PhoneTag {\n  UNTAGGED = 'UNTAGGED',\n  MAIN = 'MAIN',\n  HOME = 'HOME',\n  MOBILE = 'MOBILE',\n  WORK = 'WORK',\n  FAX = 'FAX',\n}\n\n/** @enumType */\nexport type PhoneTagWithLiterals =\n  | PhoneTag\n  | 'UNTAGGED'\n  | 'MAIN'\n  | 'HOME'\n  | 'MOBILE'\n  | 'WORK'\n  | 'FAX';\n\nexport interface AddressWrapper {\n  /** Address. */\n  address?: Address;\n  /** Address tag. */\n  tag?: AddressTagWithLiterals;\n}\n\n/** Physical address */\nexport interface Address {\n  /**\n   * Country code.\n   * @format COUNTRY\n   */\n  country?: string | null;\n  /** Subdivision. Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */\n  subdivision?: string | null;\n  /** City name. */\n  city?: string | null;\n  /** Zip/postal code. */\n  postalCode?: string | null;\n  /** Main address line, usually street and number as free text. */\n  addressLine?: string | null;\n  /** Free text providing more detailed address info. Usually contains apartment, suite, and floor. */\n  addressLine2?: string | null;\n  /**\n   * Street name.\n   * @maxLength 1000\n   */\n  streetName?: string | null;\n  /**\n   * Street number.\n   * @maxLength 1000\n   */\n  streetNumber?: string | null;\n}\n\nexport enum AddressTag {\n  UNTAGGED = 'UNTAGGED',\n  HOME = 'HOME',\n  WORK = 'WORK',\n  BILLING = 'BILLING',\n  SHIPPING = 'SHIPPING',\n}\n\n/** @enumType */\nexport type AddressTagWithLiterals =\n  | AddressTag\n  | 'UNTAGGED'\n  | 'HOME'\n  | 'WORK'\n  | 'BILLING'\n  | 'SHIPPING';\n\nexport interface CaptchaToken extends CaptchaTokenTokenOneOf {\n  /** @maxLength 5000 */\n  Recaptcha?: string;\n  /** @maxLength 5000 */\n  InvisibleRecaptcha?: string;\n  /** @maxLength 5000 */\n  NoCaptcha?: string;\n}\n\n/** @oneof */\nexport interface CaptchaTokenTokenOneOf {\n  /** @maxLength 5000 */\n  Recaptcha?: string;\n  /** @maxLength 5000 */\n  InvisibleRecaptcha?: string;\n  /** @maxLength 5000 */\n  NoCaptcha?: string;\n}\n\nexport interface StateMachineResponse\n  extends StateMachineResponseStateDataOneOf {\n  /** Current state of the login or registration process. */\n  state?: StateTypeWithLiterals;\n  /** Session token. If `state` is not `SUCCESS`, this field is undefined. */\n  sessionToken?: string | null;\n  /** Token that represents the current state of the login or registration process. */\n  stateToken?: string | null;\n  /** Identity of the current member. */\n  identity?: Identity;\n  /** Additional data relevant to the login or registration process. */\n  additionalData?: Record<string, CustomValue>;\n}\n\n/** @oneof */\nexport interface StateMachineResponseStateDataOneOf {}\n\nexport enum StateType {\n  /** Initial unknown state. */\n  UNKNOWN_STATE = 'UNKNOWN_STATE',\n  /** Login completed successfully. */\n  SUCCESS = 'SUCCESS',\n  /** Indicates that the member needs the owner to approve their registration. */\n  REQUIRE_OWNER_APPROVAL = 'REQUIRE_OWNER_APPROVAL',\n  /** Indicates that the member needs to verify their email. */\n  REQUIRE_EMAIL_VERIFICATION = 'REQUIRE_EMAIL_VERIFICATION',\n  /** Indicates that the `status` is not one that prevents the member logging in, meaning it's not `OFFLINE`, `BLOCKED`, or `DELETED`. */\n  STATUS_CHECK = 'STATUS_CHECK',\n}\n\n/** @enumType */\nexport type StateTypeWithLiterals =\n  | StateType\n  | 'UNKNOWN_STATE'\n  | 'SUCCESS'\n  | 'REQUIRE_OWNER_APPROVAL'\n  | 'REQUIRE_EMAIL_VERIFICATION'\n  | 'STATUS_CHECK';\n\nexport interface Identity {\n  /**\n   * Identity ID.\n   * @format GUID\n   */\n  id?: string | null;\n  /**\n   * Revision number, which increments by 1 each time the identity is updated.\n   * To prevent conflicting changes,\n   * the current revision must be passed when updating the identity.\n   *\n   * Ignored when creating an identity.\n   */\n  revision?: string | null;\n  /**\n   * Date and time the identity was created.\n   * @readonly\n   */\n  createdDate?: Date | null;\n  /**\n   * Date and time the identity was updated.\n   * @readonly\n   */\n  updatedDate?: Date | null;\n  /** The identity configured connections to authenticate with. */\n  connections?: Connection[];\n  /** Identity profile. */\n  identityProfile?: IdentityProfile;\n  /**\n   * Additional information about the identity that can impact user access.\n   * This data cannot be set.\n   */\n  metadata?: Metadata;\n  /** Identity email address. */\n  email?: Email;\n  /** Identity's current status. */\n  status?: StatusV2;\n  /** Custom attributes. */\n  customAttributes?: Record<string, any> | null;\n  /**\n   * Identity verification factors.\n   * @maxSize 10\n   * @readonly\n   */\n  factors?: Factor[];\n}\n\nexport interface Connection extends ConnectionTypeOneOf {\n  /** IDP connection. */\n  idpConnection?: IdpConnection;\n  /** Authenticator connection. */\n  authenticatorConnection?: AuthenticatorConnection;\n}\n\n/** @oneof */\nexport interface ConnectionTypeOneOf {\n  /** IDP connection. */\n  idpConnection?: IdpConnection;\n  /** Authenticator connection. */\n  authenticatorConnection?: AuthenticatorConnection;\n}\n\nexport interface IdpConnection {\n  /**\n   * IDP connection ID.\n   * @format GUID\n   */\n  idpConnectionId?: string;\n  /** IDP user ID. */\n  idpUserId?: string;\n}\n\nexport interface AuthenticatorConnection {\n  /**\n   * Authenticator connection ID.\n   * @format GUID\n   */\n  authenticatorConnectionId?: string;\n  /** Whether re-enrollment is required. */\n  reEnrollmentRequired?: boolean;\n}\n\nexport interface Metadata {}\n\nexport interface Email {\n  /**\n   * Email address.\n   * @format EMAIL\n   */\n  address?: string;\n  /** Whether the email address is verified. */\n  isVerified?: boolean;\n}\n\nexport interface StatusV2 {\n  /** Descriptive name of the identity status. */\n  name?: StatusNameWithLiterals;\n  /** Reasons for the current identity status. */\n  reasons?: ReasonWithLiterals[];\n}\n\nexport enum StatusName {\n  /** Unknown status. This value isn't used. */\n  UNKNOWN_STATUS = 'UNKNOWN_STATUS',\n  /** Identity is pending verification, owner approval, or both. */\n  PENDING = 'PENDING',\n  /** Identity is active and can log in. */\n  ACTIVE = 'ACTIVE',\n  /** Identity is deleted. This identity can't log in. */\n  DELETED = 'DELETED',\n  /** Identity is blocked. This identity can't log in. */\n  BLOCKED = 'BLOCKED',\n  /** Identity is offline. This identity can't log in. */\n  OFFLINE = 'OFFLINE',\n}\n\n/** @enumType */\nexport type StatusNameWithLiterals =\n  | StatusName\n  | 'UNKNOWN_STATUS'\n  | 'PENDING'\n  | 'ACTIVE'\n  | 'DELETED'\n  | 'BLOCKED'\n  | 'OFFLINE';\n\nexport enum Reason {\n  /** Unknown reason. This value isn't used. */\n  UNKNOWN_REASON = 'UNKNOWN_REASON',\n  /** The identity is waiting for admin approval. After the approval, the identity has an `ACTIVE` status. */\n  PENDING_ADMIN_APPROVAL_REQUIRED = 'PENDING_ADMIN_APPROVAL_REQUIRED',\n  /** The identity has to verify the email. After the verification, the identity has an `ACTIVE` status. */\n  PENDING_EMAIL_VERIFICATION_REQUIRED = 'PENDING_EMAIL_VERIFICATION_REQUIRED',\n}\n\n/** @enumType */\nexport type ReasonWithLiterals =\n  | Reason\n  | 'UNKNOWN_REASON'\n  | 'PENDING_ADMIN_APPROVAL_REQUIRED'\n  | 'PENDING_EMAIL_VERIFICATION_REQUIRED';\n\nexport interface Factor {\n  /**\n   * Factor ID.\n   * @format GUID\n   */\n  factorId?: string;\n  /** Factor type. */\n  type?: FactorTypeWithLiterals;\n  /** Factor status. */\n  status?: StatusWithLiterals;\n}\n\nexport enum FactorType {\n  /** Unknown factor type. */\n  UNKNOWN_FACTOR_TYPE = 'UNKNOWN_FACTOR_TYPE',\n  /** Requires a password. */\n  PASSWORD = 'PASSWORD',\n  /** Requires a code sent via SMS. */\n  SMS = 'SMS',\n  /** Requires a code sent by phone call. */\n  CALL = 'CALL',\n  /** Requires a code sent by email. */\n  EMAIL = 'EMAIL',\n  /** Requires authentication via an authenticator app. */\n  TOTP = 'TOTP',\n  /** Requires authentication via a push notification. */\n  PUSH = 'PUSH',\n  /** Requires authentication via WebAuthn/passkey. */\n  WEBAUTHN = 'WEBAUTHN',\n  /** Requires a recovery code. */\n  RECOVERY_CODE = 'RECOVERY_CODE',\n}\n\n/** @enumType */\nexport type FactorTypeWithLiterals =\n  | FactorType\n  | 'UNKNOWN_FACTOR_TYPE'\n  | 'PASSWORD'\n  | 'SMS'\n  | 'CALL'\n  | 'EMAIL'\n  | 'TOTP'\n  | 'PUSH'\n  | 'WEBAUTHN'\n  | 'RECOVERY_CODE';\n\nexport enum Status {\n  /** Factor requires activation. */\n  INACTIVE = 'INACTIVE',\n  /** Factor is active and can be used for authentication. */\n  ACTIVE = 'ACTIVE',\n  /** Factor is blocked and cannot be used for authentication. The user should reenroll the factor. */\n  REQUIRE_REENROLL = 'REQUIRE_REENROLL',\n}\n\n/** @enumType */\nexport type StatusWithLiterals =\n  | Status\n  | 'INACTIVE'\n  | 'ACTIVE'\n  | 'REQUIRE_REENROLL';\n\nexport interface CustomValue extends CustomValueValueOneOf {\n  /** String value. */\n  strValue?: string;\n  /** Number value. */\n  numValue?: number;\n  /** Date value. */\n  dateValue?: Date | null;\n  /** List value. */\n  listValue?: ListValue;\n  /** Map value. */\n  mapValue?: MapValue;\n}\n\n/** @oneof */\nexport interface CustomValueValueOneOf {\n  /** String value. */\n  strValue?: string;\n  /** Number value. */\n  numValue?: number;\n  /** Date value. */\n  dateValue?: Date | null;\n  /** List value. */\n  listValue?: ListValue;\n  /** Map value. */\n  mapValue?: MapValue;\n}\n\nexport interface ListValue {\n  /** Custom value. */\n  value?: CustomValue[];\n}\n\nexport interface MapValue {\n  /** Mapped custom value. */\n  value?: Record<string, CustomValue>;\n}\n\nexport interface RequireMfaData {\n  /**\n   * The factors available for the user to perform the required MFA.\n   * @maxSize 100\n   */\n  availableFactors?: V1Factor[];\n  /** The reason the user is required to perform MFA. */\n  reason?: MfaReasonWithLiterals;\n}\n\nexport interface V1Factor {\n  /** Type of verification factor. */\n  factorType?: FactorTypeWithLiterals;\n  /** Availability status for second factor */\n  factorStatus?: FactorStatusWithLiterals;\n}\n\nexport enum FactorStatus {\n  UNKNOWN_FACTOR_STATUS = 'UNKNOWN_FACTOR_STATUS',\n  ENABLED = 'ENABLED',\n  REQUIRE_ACTIVATION = 'REQUIRE_ACTIVATION',\n  REQUIRE_REENROLL = 'REQUIRE_REENROLL',\n  ENABLED_BY_RULE = 'ENABLED_BY_RULE',\n  DISABLED_BY_RULE = 'DISABLED_BY_RULE',\n}\n\n/** @enumType */\nexport type FactorStatusWithLiterals =\n  | FactorStatus\n  | 'UNKNOWN_FACTOR_STATUS'\n  | 'ENABLED'\n  | 'REQUIRE_ACTIVATION'\n  | 'REQUIRE_REENROLL'\n  | 'ENABLED_BY_RULE'\n  | 'DISABLED_BY_RULE';\n\nexport enum MfaReason {\n  UNKNOWN_MFA_REASON = 'UNKNOWN_MFA_REASON',\n  /** Mfa is required due to user settings */\n  USER_SETTINGS = 'USER_SETTINGS',\n  /** Mfa is required due to high risk login */\n  HIGH_RISK_LOGIN = 'HIGH_RISK_LOGIN',\n}\n\n/** @enumType */\nexport type MfaReasonWithLiterals =\n  | MfaReason\n  | 'UNKNOWN_MFA_REASON'\n  | 'USER_SETTINGS'\n  | 'HIGH_RISK_LOGIN';\n\nexport interface MfaChallengeData {\n  /** Type of verifation factor. */\n  factorType?: FactorTypeWithLiterals;\n  verificationChallengeData?: VerificationChallenge;\n  /**\n   * Factors types the user can choose from to verify themselves.\n   * @maxSize 100\n   */\n  availableFactors?: V1Factor[];\n  /** The reason the user is required for verification. */\n  reason?: MfaReasonWithLiterals;\n}\n\nexport interface VerificationChallenge\n  extends VerificationChallengeFactorChallengeDataOneOf {\n  pushData?: PushChallengeData;\n  webauthnData?: WebAuthnChallengeData;\n  /** @maxLength 200 */\n  hint?: string | null;\n}\n\n/** @oneof */\nexport interface VerificationChallengeFactorChallengeDataOneOf {\n  pushData?: PushChallengeData;\n  webauthnData?: WebAuthnChallengeData;\n}\n\nexport interface PushChallengeData {\n  /**\n   * This should be tied to a specific push notification.\n   * It will be sent in subsequent requests to verify the factor.\n   * @maxLength 36\n   */\n  transactionId?: string;\n}\n\nexport interface WebAuthnChallengeData {\n  /**\n   * A unique identifier for this challenge that will be used to correlate\n   * the authentication response with this challenge.\n   * This should be a cryptographically random GUID to prevent guessing attacks.\n   * @format GUID\n   */\n  challengeId?: string;\n  /**\n   * The challenge that will be signed by the authenticator during the WebAuthn authentication ceremony.\n   * This should be a cryptographically secure random value with at least 16 bytes of entropy.\n   * The value is used to prevent replay attacks and MUST be randomly generated by the implementer.\n   */\n  challenge?: Uint8Array;\n  /**\n   * The timeout in milliseconds for the WebAuthn authentication ceremony.\n   * After this time, the challenge will be considered expired and the authentication will need to be restarted.\n   * This is optional and may be overridden by the client if provided.\n   * The WebAuthn spec recommends a timeout of at least 1 minute (60000ms).\n   */\n  timeoutMs?: number | null;\n  /**\n   * Optional list of credentials that are acceptable for this authentication ceremony.\n   * If empty, all credentials associated with the user will be considered.\n   * @maxSize 50\n   */\n  allowCredentials?: PublicKeyCredentialDescriptor[];\n  /** Specifies the requirement for user verification during the authentication ceremony. */\n  userVerification?: UserVerificationRequirementWithLiterals;\n  /**\n   * Optional hints to guide the client UI\n   * Examples include \"security-key\" to emphasize external authenticators\n   * or \"client-device\" to emphasize built-in authenticators\n   * @maxLength 50\n   * @maxSize 10\n   */\n  hints?: string[];\n  /**\n   * Optional extensions for the authentication ceremony\n   * Provides additional parameters for specialized WebAuthn functionality\n   */\n  extensions?: AuthenticationExtensionInputs;\n}\n\nexport interface PublicKeyCredentialDescriptor {\n  /** The credential ID */\n  id?: Uint8Array;\n  /**\n   * An optional hint as to the transports used by the credential\n   * Examples include \"usb\", \"nfc\", \"ble\", \"internal\", \"hybrid\"\n   * @maxLength 50\n   * @maxSize 10\n   */\n  transports?: string[];\n}\n\nexport enum UserVerificationRequirement {\n  /** Default unspecified value */\n  USER_VERIFICATION_UNSPECIFIED = 'USER_VERIFICATION_UNSPECIFIED',\n  /**\n   * The Relying Party requires user verification and will fail the operation if the response doesn't have the UV flag\n   * set\n   */\n  USER_VERIFICATION_REQUIRED = 'USER_VERIFICATION_REQUIRED',\n  /** The Relying Party prefers user verification but will not fail the operation if unavailable */\n  USER_VERIFICATION_PREFERRED = 'USER_VERIFICATION_PREFERRED',\n  /** The Relying Party does not want user verification employed (e.g., to minimize disruption to the user experience) */\n  USER_VERIFICATION_DISCOURAGED = 'USER_VERIFICATION_DISCOURAGED',\n}\n\n/** @enumType */\nexport type UserVerificationRequirementWithLiterals =\n  | UserVerificationRequirement\n  | 'USER_VERIFICATION_UNSPECIFIED'\n  | 'USER_VERIFICATION_REQUIRED'\n  | 'USER_VERIFICATION_PREFERRED'\n  | 'USER_VERIFICATION_DISCOURAGED';\n\nexport interface AuthenticationExtensionInputs\n  extends AuthenticationExtensionInputsLargeBlobOperationOneOf {\n  /** Read existing large blob data from the authenticator */\n  largeBlobRead?: boolean;\n  /** Write data to the authenticator's large blob storage */\n  largeBlobWrite?: Uint8Array;\n  /**\n   * FIDO AppID Extension (appid)\n   * An AppID that was used for previously registered U2F authenticators\n   * This makes already-registered U2F credentials forward-compatible with the WebAuthn API\n   * @maxLength 256\n   */\n  appid?: string;\n  /**\n   * User Verification Method Extension (uvm)\n   * Requests the authenticator to report which verification methods were used\n   * Examples include fingerprint, PIN, or facial recognition\n   */\n  uvm?: boolean;\n}\n\n/** @oneof */\nexport interface AuthenticationExtensionInputsLargeBlobOperationOneOf {\n  /** Read existing large blob data from the authenticator */\n  largeBlobRead?: boolean;\n  /** Write data to the authenticator's large blob storage */\n  largeBlobWrite?: Uint8Array;\n}\n\nexport interface LoginV2Request {\n  /** Identifier of identity logging in. */\n  loginId: LoginId;\n  /** Password of the identity logging in. */\n  password?: string | null;\n  /** CAPTCHA tokens, when CAPTCHA setting is on. */\n  captchaTokens?: CaptchaToken[];\n  /** Additional data that's relevant for the flow. */\n  clientMetaData?: Record<string, any> | null;\n}\n\nexport interface WebAuthnVerifyData {\n  /**\n   * The challenge_id from the WebAuthnChallengeData that was returned in the previous\n   * verification response. This will always be present when completing the WebAuthn authentication\n   * ceremony with the credential data from the client.\n   * @format GUID\n   */\n  challengeId?: string | null;\n  /**\n   * If this field is present, this is a request to complete the WebAuthn authentication\n   * with the credential data from the client.\n   *\n   * The credential contains a JSON string representation of a WebAuthn PublicKeyCredential\n   * object returned by the browser during authentication, serialized as per the WebAuthn specification.\n   * The SPI implementation should use this to verify the authentication assertion.\n   *\n   * Any standards-compliant WebAuthn server library should be able to process this serialized format.\n   * For details on the serialization format, refer to the W3C WebAuthn specification:\n   * https://www.w3.org/TR/webauthn-3/#dom-publickeycredential-tojson\n   * @maxLength 3000\n   */\n  credential?: string | null;\n}\n\nexport interface ExternalEmailVerifyData {\n  /**\n   * @minLength 1\n   * @maxLength 100\n   */\n  code?: string | null;\n}\n\nexport interface ChangePasswordRequest {\n  /** The new password to set for the logged in user */\n  newPassword: string;\n}\n\nexport interface ChangePasswordResponse {}\n\nexport interface LoginWithIdpConnectionRequest {\n  /**\n   * The id of the connection id (can be fetched by calling connection-service.listEnabledConnectionsClientData\n   * @format GUID\n   */\n  idpConnectionId?: string;\n  /**\n   * The id of the tenant the caller wants to login into\n   * @format GUID\n   */\n  tenantId?: string;\n  /** The type of the tenant the caller wants to login into */\n  tenantType?: TenantTypeWithLiterals;\n  customPayload?: Record<string, string>;\n  /**\n   * This flow ultimately returns an HTML page that asynchronously posts the LoginResponse via the BroadcastChannel API.\n   * The message will be posted to a channel named `wix-idp-$session_id`, and encrypted with the `encryption_key`.\n   * Encryption key should be base64 encoded. Encryption is done using AES-GCM with a random IV that's sent alongside the payload\n   */\n  sessionId?: string;\n  encryptionKey?: string;\n  visitorId?: string | null;\n  bsi?: string | null;\n}\n\nexport enum TenantType {\n  /** Unknown tenant type. This value isn't used. */\n  UNKNOWN_TENANT_TYPE = 'UNKNOWN_TENANT_TYPE',\n  /** The identity is a Wix user. */\n  ACCOUNT = 'ACCOUNT',\n  /** The identity is a member. */\n  SITE = 'SITE',\n}\n\n/** @enumType */\nexport type TenantTypeWithLiterals =\n  | TenantType\n  | 'UNKNOWN_TENANT_TYPE'\n  | 'ACCOUNT'\n  | 'SITE';\n\nexport interface RawHttpResponse {\n  body?: Uint8Array;\n  statusCode?: number | null;\n  headers?: HeadersEntry[];\n}\n\nexport interface HeadersEntry {\n  key?: string;\n  value?: string;\n}\n\nexport interface RawHttpRequest {\n  body?: Uint8Array;\n  pathParams?: PathParametersEntry[];\n  queryParams?: QueryParametersEntry[];\n  headers?: HeadersEntry[];\n  method?: string;\n  rawPath?: string;\n  rawQuery?: string;\n}\n\nexport interface PathParametersEntry {\n  key?: string;\n  value?: string;\n}\n\nexport interface QueryParametersEntry {\n  key?: string;\n  value?: string;\n}\n\nexport interface LoginCallbackRequest {\n  /** state that that received on the redirect */\n  state?: string;\n  /** session token */\n  sessionToken?: string;\n}\n\nexport interface LoginWithIdpConnectionTokenParamsRequest {\n  /**\n   * The id of the connection id (can be fetched by calling connection-service.listEnabledConnectionsClientData)\n   * @format GUID\n   */\n  idpConnectionId?: string;\n  /** A set of fields that are required for the connection to be able to identify and authenticate the user */\n  tokenParams?: Record<string, string>;\n}\n\nexport interface SignOnRequest {\n  /** the identifier of the identity */\n  loginId: LoginId;\n  /** profile of the identity */\n  profile?: IdentityProfile;\n  /** when true will mark the email of the identity as verified */\n  verifyEmail?: boolean;\n  /** when false will create a new contact instead of merging the existing contact into the identity */\n  mergeExistingContact?: boolean;\n}\n\nexport interface SignOnResponse {\n  /** session token for the requested identity */\n  sessionToken?: string;\n  /** The Identity of the provided login_id */\n  identity?: Identity;\n}\n\n/** logout request payload */\nexport interface LogoutRequest {\n  /**\n   * redirect after logout\n   * @format WEB_URL\n   */\n  postLogoutRedirectUri?: string | null;\n  /**\n   * caller identifier\n   * @format GUID\n   */\n  clientId?: string | null;\n}\n\nexport interface VerifyRequest extends VerifyRequestFactorDataOneOf {\n  smsData?: SmsVerifyData;\n  callData?: CallVerifyData;\n  emailData?: ExternalEmailVerifyData;\n  totpData?: TotpVerifyData;\n  pushData?: PushVerifyData;\n  webauthnData?: WebAuthnVerifyData;\n  /**\n   * TODO: is this a reasonable maxLength?\n   * @maxLength 1000\n   */\n  stateToken?: string;\n  factorType: FactorTypeWithLiterals;\n  /** Relevant for second factors only. */\n  rememberThisDevice?: boolean;\n}\n\n/** @oneof */\nexport interface VerifyRequestFactorDataOneOf {\n  smsData?: SmsVerifyData;\n  callData?: CallVerifyData;\n  emailData?: ExternalEmailVerifyData;\n  totpData?: TotpVerifyData;\n  pushData?: PushVerifyData;\n  webauthnData?: WebAuthnVerifyData;\n}\n\nexport interface SmsVerifyData {\n  /**\n   * @minLength 1\n   * @maxLength 100\n   */\n  code?: string | null;\n}\n\nexport interface CallVerifyData {\n  /**\n   * @minLength 1\n   * @maxLength 100\n   */\n  code?: string | null;\n}\n\nexport interface TotpVerifyData {\n  /**\n   * @minLength 1\n   * @maxLength 100\n   */\n  code?: string | null;\n}\n\nexport interface PushVerifyData {\n  /** @maxLength 36 */\n  transactionId?: string | null;\n}\n\nexport interface GetWebauthnChallengeRequest {\n  /**\n   * Identifier of identity for which the WebAuthn challenge is requested for.\n   * If not provided an anonymous webAuthn challenge will be returned.\n   */\n  loginId?: LoginId;\n}\n\nexport interface GetWebauthnChallengeResponse {\n  /** The challenge that will be used for a WebAuthn authentication ceremony. */\n  webauthn?: WebAuthnChallengeData;\n}\n\n/** @docsIgnore */\nexport type RegisterV2ApplicationErrors =\n  | {\n      code?: 'UNIMPLEMENTED_FEATURE';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'THROTTLED_FEATURE';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'INVALID_CAPTCHA_TOKEN';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'CAPTCHA_TOKEN_REQUIRED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'IP_ADDRESS_FILTERED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'RECAPTCHA_FAILED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'RECAPTCHA_REQUIRED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'MISSING_CAPTCHA_TOKEN';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'USER_EMAIL_OFAC_ADDRESS';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'UNSUPPORTED_FIELD';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'ATTRIBUTE_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'CLIENT_METADATA_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'INVALID_LD_SESSION';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'DUPLICATE_EMAIL';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'COULD_NOT_CREATE_SET_ACCOUNT_USER';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'INVALID_USER_TYPE';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'REGISTRATION_TO_EDITORX_NOT_ALLOWED';\n      description?: string;\n      data?: Record<string, any>;\n    };\n/** @docsIgnore */\nexport type RegisterV2ValidationErrors =\n  | {\n      ruleName?: 'PROVIDE_TENANT_ID';\n    }\n  | {\n      ruleName?: 'INVALID_AUTHENTICATOR_ID';\n    }\n  | {\n      ruleName?: 'VALUEֹֹ_TOO_SHORT';\n    }\n  | {\n      ruleName?: 'VALUEֹֹ_TOO_LONG';\n    }\n  | {\n      ruleName?: 'VALUE_DID_NOT_MATCH';\n    };\n/** @docsIgnore */\nexport type LoginV2ApplicationErrors =\n  | {\n      code?: 'THROTTLED_FEATURE';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'INVALID_CAPTCHA_TOKEN';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'CAPTCHA_TOKEN_REQUIRED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'REENROLLMENT_REQUIRED_BY_ADMIN';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'TRUSTED_CLIENTS_ONLY';\n      description?: string;\n      data?: Record<string, any>;\n    };\n/** @docsIgnore */\nexport type LoginV2ValidationErrors =\n  | {\n      ruleName?: 'PROVIDE_TENANT_ID';\n    }\n  | {\n      ruleName?: 'INVALID_AUTHENTICATOR_ID';\n    };\n","import * as ambassadorWixIamAuthenticationV1Authentication from './iam-authentication-v1-authentication-authentication.http.js';\nimport * as ambassadorWixIamAuthenticationV1AuthenticationTypes from './iam-authentication-v1-authentication-authentication.types.js';\nimport * as ambassadorWixIamAuthenticationV1AuthenticationUniversalTypes from './iam-authentication-v1-authentication-authentication.universal.js';\n\nexport type __PublicMethodMetaInfo<\n  K = string,\n  M = unknown,\n  T = unknown,\n  S = unknown,\n  Q = unknown,\n  R = unknown\n> = {\n  getUrl: (context: any) => string;\n  httpMethod: K;\n  path: string;\n  pathParams: M;\n  __requestType: T;\n  __originalRequestType: S;\n  __responseType: Q;\n  __originalResponseType: R;\n};\n\nexport function registerV2(): __PublicMethodMetaInfo<\n  'POST',\n  {},\n  ambassadorWixIamAuthenticationV1AuthenticationUniversalTypes.RegisterV2Request,\n  ambassadorWixIamAuthenticationV1AuthenticationTypes.RegisterV2Request,\n  ambassadorWixIamAuthenticationV1AuthenticationUniversalTypes.StateMachineResponse,\n  ambassadorWixIamAuthenticationV1AuthenticationTypes.StateMachineResponse\n> {\n  const payload = {} as any;\n\n  const getRequestOptions =\n    ambassadorWixIamAuthenticationV1Authentication.registerV2(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v2/register',\n    pathParams: {},\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function loginV2(): __PublicMethodMetaInfo<\n  'POST',\n  {},\n  ambassadorWixIamAuthenticationV1AuthenticationUniversalTypes.LoginV2Request,\n  ambassadorWixIamAuthenticationV1AuthenticationTypes.LoginV2Request,\n  ambassadorWixIamAuthenticationV1AuthenticationUniversalTypes.StateMachineResponse,\n  ambassadorWixIamAuthenticationV1AuthenticationTypes.StateMachineResponse\n> {\n  const payload = {} as any;\n\n  const getRequestOptions =\n    ambassadorWixIamAuthenticationV1Authentication.loginV2(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v2/login',\n    pathParams: {},\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function changePassword(): __PublicMethodMetaInfo<\n  'POST',\n  {},\n  ambassadorWixIamAuthenticationV1AuthenticationUniversalTypes.ChangePasswordRequest,\n  ambassadorWixIamAuthenticationV1AuthenticationTypes.ChangePasswordRequest,\n  ambassadorWixIamAuthenticationV1AuthenticationUniversalTypes.ChangePasswordResponse,\n  ambassadorWixIamAuthenticationV1AuthenticationTypes.ChangePasswordResponse\n> {\n  const payload = {} as any;\n\n  const getRequestOptions =\n    ambassadorWixIamAuthenticationV1Authentication.changePassword(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v2/change-password',\n    pathParams: {},\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function signOn(): __PublicMethodMetaInfo<\n  'POST',\n  {},\n  ambassadorWixIamAuthenticationV1AuthenticationUniversalTypes.SignOnRequest,\n  ambassadorWixIamAuthenticationV1AuthenticationTypes.SignOnRequest,\n  ambassadorWixIamAuthenticationV1AuthenticationUniversalTypes.SignOnResponse,\n  ambassadorWixIamAuthenticationV1AuthenticationTypes.SignOnResponse\n> {\n  const payload = {} as any;\n\n  const getRequestOptions =\n    ambassadorWixIamAuthenticationV1Authentication.signOn(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v2/sign-on',\n    pathParams: {},\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function logout(): __PublicMethodMetaInfo<\n  'GET',\n  {},\n  ambassadorWixIamAuthenticationV1AuthenticationUniversalTypes.LogoutRequest,\n  ambassadorWixIamAuthenticationV1AuthenticationTypes.LogoutRequest,\n  ambassadorWixIamAuthenticationV1AuthenticationUniversalTypes.RawHttpResponse,\n  ambassadorWixIamAuthenticationV1AuthenticationTypes.RawHttpResponse\n> {\n  const payload = {} as any;\n\n  const getRequestOptions =\n    ambassadorWixIamAuthenticationV1Authentication.logout(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'GET',\n    path: '/v1/logout',\n    pathParams: {},\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function verify(): __PublicMethodMetaInfo<\n  'POST',\n  { factorType: string },\n  ambassadorWixIamAuthenticationV1AuthenticationUniversalTypes.VerifyRequest,\n  ambassadorWixIamAuthenticationV1AuthenticationTypes.VerifyRequest,\n  ambassadorWixIamAuthenticationV1AuthenticationUniversalTypes.StateMachineResponse,\n  ambassadorWixIamAuthenticationV1AuthenticationTypes.StateMachineResponse\n> {\n  const payload = { factorType: ':factorType' } as any;\n\n  const getRequestOptions =\n    ambassadorWixIamAuthenticationV1Authentication.verify(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v2/{factorType}/verify',\n    pathParams: { factorType: 'factorType' },\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport {\n  Authentication as AuthenticationOriginal,\n  RegisterV2Request as RegisterV2RequestOriginal,\n  LoginId as LoginIdOriginal,\n  LoginIdTypeOneOf as LoginIdTypeOneOfOriginal,\n  IdentityProfile as IdentityProfileOriginal,\n  PrivacyStatus as PrivacyStatusOriginal,\n  PrivacyStatusWithLiterals as PrivacyStatusWithLiteralsOriginal,\n  CustomField as CustomFieldOriginal,\n  V1CustomValue as V1CustomValueOriginal,\n  V1CustomValueValueOneOf as V1CustomValueValueOneOfOriginal,\n  V1ListValue as V1ListValueOriginal,\n  V1MapValue as V1MapValueOriginal,\n  SecondaryEmail as SecondaryEmailOriginal,\n  EmailTag as EmailTagOriginal,\n  EmailTagWithLiterals as EmailTagWithLiteralsOriginal,\n  Phone as PhoneOriginal,\n  PhoneTag as PhoneTagOriginal,\n  PhoneTagWithLiterals as PhoneTagWithLiteralsOriginal,\n  AddressWrapper as AddressWrapperOriginal,\n  Address as AddressOriginal,\n  AddressTag as AddressTagOriginal,\n  AddressTagWithLiterals as AddressTagWithLiteralsOriginal,\n  CaptchaToken as CaptchaTokenOriginal,\n  CaptchaTokenTokenOneOf as CaptchaTokenTokenOneOfOriginal,\n  StateMachineResponse as StateMachineResponseOriginal,\n  StateMachineResponseStateDataOneOf as StateMachineResponseStateDataOneOfOriginal,\n  StateType as StateTypeOriginal,\n  StateTypeWithLiterals as StateTypeWithLiteralsOriginal,\n  Identity as IdentityOriginal,\n  Connection as ConnectionOriginal,\n  ConnectionTypeOneOf as ConnectionTypeOneOfOriginal,\n  IdpConnection as IdpConnectionOriginal,\n  AuthenticatorConnection as AuthenticatorConnectionOriginal,\n  Metadata as MetadataOriginal,\n  Email as EmailOriginal,\n  StatusV2 as StatusV2Original,\n  StatusName as StatusNameOriginal,\n  StatusNameWithLiterals as StatusNameWithLiteralsOriginal,\n  Reason as ReasonOriginal,\n  ReasonWithLiterals as ReasonWithLiteralsOriginal,\n  Factor as FactorOriginal,\n  FactorType as FactorTypeOriginal,\n  FactorTypeWithLiterals as FactorTypeWithLiteralsOriginal,\n  Status as StatusOriginal,\n  StatusWithLiterals as StatusWithLiteralsOriginal,\n  CustomValue as CustomValueOriginal,\n  CustomValueValueOneOf as CustomValueValueOneOfOriginal,\n  ListValue as ListValueOriginal,\n  MapValue as MapValueOriginal,\n  RequireMfaData as RequireMfaDataOriginal,\n  V1Factor as V1FactorOriginal,\n  FactorStatus as FactorStatusOriginal,\n  FactorStatusWithLiterals as FactorStatusWithLiteralsOriginal,\n  MfaReason as MfaReasonOriginal,\n  MfaReasonWithLiterals as MfaReasonWithLiteralsOriginal,\n  MfaChallengeData as MfaChallengeDataOriginal,\n  VerificationChallenge as VerificationChallengeOriginal,\n  VerificationChallengeFactorChallengeDataOneOf as VerificationChallengeFactorChallengeDataOneOfOriginal,\n  PushChallengeData as PushChallengeDataOriginal,\n  WebAuthnChallengeData as WebAuthnChallengeDataOriginal,\n  PublicKeyCredentialDescriptor as PublicKeyCredentialDescriptorOriginal,\n  UserVerificationRequirement as UserVerificationRequirementOriginal,\n  UserVerificationRequirementWithLiterals as UserVerificationRequirementWithLiteralsOriginal,\n  AuthenticationExtensionInputs as AuthenticationExtensionInputsOriginal,\n  AuthenticationExtensionInputsLargeBlobOperationOneOf as AuthenticationExtensionInputsLargeBlobOperationOneOfOriginal,\n  LoginV2Request as LoginV2RequestOriginal,\n  WebAuthnVerifyData as WebAuthnVerifyDataOriginal,\n  ExternalEmailVerifyData as ExternalEmailVerifyDataOriginal,\n  ChangePasswordRequest as ChangePasswordRequestOriginal,\n  ChangePasswordResponse as ChangePasswordResponseOriginal,\n  LoginWithIdpConnectionRequest as LoginWithIdpConnectionRequestOriginal,\n  TenantType as TenantTypeOriginal,\n  TenantTypeWithLiterals as TenantTypeWithLiteralsOriginal,\n  RawHttpResponse as RawHttpResponseOriginal,\n  HeadersEntry as HeadersEntryOriginal,\n  RawHttpRequest as RawHttpRequestOriginal,\n  PathParametersEntry as PathParametersEntryOriginal,\n  QueryParametersEntry as QueryParametersEntryOriginal,\n  LoginCallbackRequest as LoginCallbackRequestOriginal,\n  LoginWithIdpConnectionTokenParamsRequest as LoginWithIdpConnectionTokenParamsRequestOriginal,\n  SignOnRequest as SignOnRequestOriginal,\n  SignOnResponse as SignOnResponseOriginal,\n  LogoutRequest as LogoutRequestOriginal,\n  VerifyRequest as VerifyRequestOriginal,\n  VerifyRequestFactorDataOneOf as VerifyRequestFactorDataOneOfOriginal,\n  SmsVerifyData as SmsVerifyDataOriginal,\n  CallVerifyData as CallVerifyDataOriginal,\n  TotpVerifyData as TotpVerifyDataOriginal,\n  PushVerifyData as PushVerifyDataOriginal,\n  GetWebauthnChallengeRequest as GetWebauthnChallengeRequestOriginal,\n  GetWebauthnChallengeResponse as GetWebauthnChallengeResponseOriginal,\n  RegisterV2ApplicationErrors as RegisterV2ApplicationErrorsOriginal,\n  RegisterV2ValidationErrors as RegisterV2ValidationErrorsOriginal,\n  LoginV2ApplicationErrors as LoginV2ApplicationErrorsOriginal,\n  LoginV2ValidationErrors as LoginV2ValidationErrorsOriginal,\n} from './iam-authentication-v1-authentication-authentication.types.js';\n"],"mappings":"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","names":["payload","PrivacyStatus","EmailTag","PhoneTag","AddressTag","StateType","StatusName","Reason","FactorType","Status","FactorStatus","MfaReason","UserVerificationRequirement","TenantType","registerV2","loginV2","changePassword","signOn","logout","verify"]}